// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_config_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_config_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_config_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_config_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_config_2eproto;
class CloneOptions;
struct CloneOptionsDefaultTypeInternal;
extern CloneOptionsDefaultTypeInternal _CloneOptions_default_instance_;
class IndexSpec;
struct IndexSpecDefaultTypeInternal;
extern IndexSpecDefaultTypeInternal _IndexSpec_default_instance_;
class Metadata;
struct MetadataDefaultTypeInternal;
extern MetadataDefaultTypeInternal _Metadata_default_instance_;
class PathSpec;
struct PathSpecDefaultTypeInternal;
extern PathSpecDefaultTypeInternal _PathSpec_default_instance_;
class RepoSpec;
struct RepoSpecDefaultTypeInternal;
extern RepoSpecDefaultTypeInternal _RepoSpec_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CloneOptions* Arena::CreateMaybeMessage<::CloneOptions>(Arena*);
template<> ::IndexSpec* Arena::CreateMaybeMessage<::IndexSpec>(Arena*);
template<> ::Metadata* Arena::CreateMaybeMessage<::Metadata>(Arena*);
template<> ::PathSpec* Arena::CreateMaybeMessage<::PathSpec>(Arena*);
template<> ::RepoSpec* Arena::CreateMaybeMessage<::RepoSpec>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class IndexSpec final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndexSpec) */ {
 public:
  inline IndexSpec() : IndexSpec(nullptr) {}
  ~IndexSpec() override;
  explicit constexpr IndexSpec(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IndexSpec(const IndexSpec& from);
  IndexSpec(IndexSpec&& from) noexcept
    : IndexSpec() {
    *this = ::std::move(from);
  }

  inline IndexSpec& operator=(const IndexSpec& from) {
    CopyFrom(from);
    return *this;
  }
  inline IndexSpec& operator=(IndexSpec&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IndexSpec& default_instance() {
    return *internal_default_instance();
  }
  static inline const IndexSpec* internal_default_instance() {
    return reinterpret_cast<const IndexSpec*>(
               &_IndexSpec_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(IndexSpec& a, IndexSpec& b) {
    a.Swap(&b);
  }
  inline void Swap(IndexSpec* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IndexSpec* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IndexSpec* New() const final {
    return new IndexSpec();
  }

  IndexSpec* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IndexSpec>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IndexSpec& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const IndexSpec& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IndexSpec* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndexSpec";
  }
  protected:
  explicit IndexSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathsFieldNumber = 2,
    kRepositoriesFieldNumber = 3,
    kNameFieldNumber = 1,
  };
  // repeated .PathSpec paths = 2 [json_name = "fs_paths"];
  int paths_size() const;
  private:
  int _internal_paths_size() const;
  public:
  void clear_paths();
  ::PathSpec* mutable_paths(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PathSpec >*
      mutable_paths();
  private:
  const ::PathSpec& _internal_paths(int index) const;
  ::PathSpec* _internal_add_paths();
  public:
  const ::PathSpec& paths(int index) const;
  ::PathSpec* add_paths();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PathSpec >&
      paths() const;

  // repeated .RepoSpec repositories = 3 [json_name = "repositories"];
  int repositories_size() const;
  private:
  int _internal_repositories_size() const;
  public:
  void clear_repositories();
  ::RepoSpec* mutable_repositories(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RepoSpec >*
      mutable_repositories();
  private:
  const ::RepoSpec& _internal_repositories(int index) const;
  ::RepoSpec* _internal_add_repositories();
  public:
  const ::RepoSpec& repositories(int index) const;
  ::RepoSpec* add_repositories();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RepoSpec >&
      repositories() const;

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:IndexSpec)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PathSpec > paths_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RepoSpec > repositories_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_config_2eproto;
};
// -------------------------------------------------------------------

class Metadata final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Metadata) */ {
 public:
  inline Metadata() : Metadata(nullptr) {}
  ~Metadata() override;
  explicit constexpr Metadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Metadata(const Metadata& from);
  Metadata(Metadata&& from) noexcept
    : Metadata() {
    *this = ::std::move(from);
  }

  inline Metadata& operator=(const Metadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline Metadata& operator=(Metadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Metadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const Metadata* internal_default_instance() {
    return reinterpret_cast<const Metadata*>(
               &_Metadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Metadata& a, Metadata& b) {
    a.Swap(&b);
  }
  inline void Swap(Metadata* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Metadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Metadata* New() const final {
    return new Metadata();
  }

  Metadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Metadata>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Metadata& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Metadata& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Metadata* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Metadata";
  }
  protected:
  explicit Metadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLabelsFieldNumber = 4,
    kUrlPatternFieldNumber = 1,
    kRemoteFieldNumber = 2,
    kGithubFieldNumber = 3,
  };
  // repeated string labels = 4 [json_name = "labels"];
  int labels_size() const;
  private:
  int _internal_labels_size() const;
  public:
  void clear_labels();
  const std::string& labels(int index) const;
  std::string* mutable_labels(int index);
  void set_labels(int index, const std::string& value);
  void set_labels(int index, std::string&& value);
  void set_labels(int index, const char* value);
  void set_labels(int index, const char* value, size_t size);
  std::string* add_labels();
  void add_labels(const std::string& value);
  void add_labels(std::string&& value);
  void add_labels(const char* value);
  void add_labels(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& labels() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_labels();
  private:
  const std::string& _internal_labels(int index) const;
  std::string* _internal_add_labels();
  public:

  // string url_pattern = 1 [json_name = "url_pattern"];
  void clear_url_pattern();
  const std::string& url_pattern() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_url_pattern(ArgT0&& arg0, ArgT... args);
  std::string* mutable_url_pattern();
  PROTOBUF_MUST_USE_RESULT std::string* release_url_pattern();
  void set_allocated_url_pattern(std::string* url_pattern);
  private:
  const std::string& _internal_url_pattern() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url_pattern(const std::string& value);
  std::string* _internal_mutable_url_pattern();
  public:

  // string remote = 2 [json_name = "remote"];
  void clear_remote();
  const std::string& remote() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_remote(ArgT0&& arg0, ArgT... args);
  std::string* mutable_remote();
  PROTOBUF_MUST_USE_RESULT std::string* release_remote();
  void set_allocated_remote(std::string* remote);
  private:
  const std::string& _internal_remote() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_remote(const std::string& value);
  std::string* _internal_mutable_remote();
  public:

  // string github = 3 [json_name = "github"];
  void clear_github();
  const std::string& github() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_github(ArgT0&& arg0, ArgT... args);
  std::string* mutable_github();
  PROTOBUF_MUST_USE_RESULT std::string* release_github();
  void set_allocated_github(std::string* github);
  private:
  const std::string& _internal_github() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_github(const std::string& value);
  std::string* _internal_mutable_github();
  public:

  // @@protoc_insertion_point(class_scope:Metadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> labels_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_pattern_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr remote_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr github_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_config_2eproto;
};
// -------------------------------------------------------------------

class CloneOptions final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CloneOptions) */ {
 public:
  inline CloneOptions() : CloneOptions(nullptr) {}
  ~CloneOptions() override;
  explicit constexpr CloneOptions(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CloneOptions(const CloneOptions& from);
  CloneOptions(CloneOptions&& from) noexcept
    : CloneOptions() {
    *this = ::std::move(from);
  }

  inline CloneOptions& operator=(const CloneOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline CloneOptions& operator=(CloneOptions&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CloneOptions& default_instance() {
    return *internal_default_instance();
  }
  static inline const CloneOptions* internal_default_instance() {
    return reinterpret_cast<const CloneOptions*>(
               &_CloneOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CloneOptions& a, CloneOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(CloneOptions* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CloneOptions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CloneOptions* New() const final {
    return new CloneOptions();
  }

  CloneOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CloneOptions>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CloneOptions& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CloneOptions& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CloneOptions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CloneOptions";
  }
  protected:
  explicit CloneOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 2,
    kPasswordEnvFieldNumber = 3,
    kDepthFieldNumber = 1,
  };
  // string username = 2 [json_name = "username"];
  void clear_username();
  const std::string& username() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_username(ArgT0&& arg0, ArgT... args);
  std::string* mutable_username();
  PROTOBUF_MUST_USE_RESULT std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // string password_env = 3 [json_name = "password_env"];
  void clear_password_env();
  const std::string& password_env() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_password_env(ArgT0&& arg0, ArgT... args);
  std::string* mutable_password_env();
  PROTOBUF_MUST_USE_RESULT std::string* release_password_env();
  void set_allocated_password_env(std::string* password_env);
  private:
  const std::string& _internal_password_env() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password_env(const std::string& value);
  std::string* _internal_mutable_password_env();
  public:

  // int32 depth = 1 [json_name = "depth"];
  void clear_depth();
  ::PROTOBUF_NAMESPACE_ID::int32 depth() const;
  void set_depth(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_depth() const;
  void _internal_set_depth(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CloneOptions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_env_;
  ::PROTOBUF_NAMESPACE_ID::int32 depth_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_config_2eproto;
};
// -------------------------------------------------------------------

class PathSpec final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PathSpec) */ {
 public:
  inline PathSpec() : PathSpec(nullptr) {}
  ~PathSpec() override;
  explicit constexpr PathSpec(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PathSpec(const PathSpec& from);
  PathSpec(PathSpec&& from) noexcept
    : PathSpec() {
    *this = ::std::move(from);
  }

  inline PathSpec& operator=(const PathSpec& from) {
    CopyFrom(from);
    return *this;
  }
  inline PathSpec& operator=(PathSpec&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PathSpec& default_instance() {
    return *internal_default_instance();
  }
  static inline const PathSpec* internal_default_instance() {
    return reinterpret_cast<const PathSpec*>(
               &_PathSpec_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PathSpec& a, PathSpec& b) {
    a.Swap(&b);
  }
  inline void Swap(PathSpec* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PathSpec* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PathSpec* New() const final {
    return new PathSpec();
  }

  PathSpec* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PathSpec>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PathSpec& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PathSpec& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PathSpec* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PathSpec";
  }
  protected:
  explicit PathSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 1,
    kNameFieldNumber = 2,
    kOrderedContentsFieldNumber = 3,
    kMetadataFieldNumber = 4,
    kIgnoreSymlinksFieldNumber = 5,
  };
  // string path = 1 [json_name = "path"];
  void clear_path();
  const std::string& path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_path();
  PROTOBUF_MUST_USE_RESULT std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // string name = 2 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string ordered_contents = 3 [json_name = "ordered_contents"];
  void clear_ordered_contents();
  const std::string& ordered_contents() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ordered_contents(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ordered_contents();
  PROTOBUF_MUST_USE_RESULT std::string* release_ordered_contents();
  void set_allocated_ordered_contents(std::string* ordered_contents);
  private:
  const std::string& _internal_ordered_contents() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ordered_contents(const std::string& value);
  std::string* _internal_mutable_ordered_contents();
  public:

  // .Metadata metadata = 4 [json_name = "metadata"];
  bool has_metadata() const;
  private:
  bool _internal_has_metadata() const;
  public:
  void clear_metadata();
  const ::Metadata& metadata() const;
  PROTOBUF_MUST_USE_RESULT ::Metadata* release_metadata();
  ::Metadata* mutable_metadata();
  void set_allocated_metadata(::Metadata* metadata);
  private:
  const ::Metadata& _internal_metadata() const;
  ::Metadata* _internal_mutable_metadata();
  public:
  void unsafe_arena_set_allocated_metadata(
      ::Metadata* metadata);
  ::Metadata* unsafe_arena_release_metadata();

  // bool ignore_symlinks = 5 [json_name = "ignore_symlinks"];
  void clear_ignore_symlinks();
  bool ignore_symlinks() const;
  void set_ignore_symlinks(bool value);
  private:
  bool _internal_ignore_symlinks() const;
  void _internal_set_ignore_symlinks(bool value);
  public:

  // @@protoc_insertion_point(class_scope:PathSpec)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ordered_contents_;
  ::Metadata* metadata_;
  bool ignore_symlinks_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_config_2eproto;
};
// -------------------------------------------------------------------

class RepoSpec final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RepoSpec) */ {
 public:
  inline RepoSpec() : RepoSpec(nullptr) {}
  ~RepoSpec() override;
  explicit constexpr RepoSpec(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RepoSpec(const RepoSpec& from);
  RepoSpec(RepoSpec&& from) noexcept
    : RepoSpec() {
    *this = ::std::move(from);
  }

  inline RepoSpec& operator=(const RepoSpec& from) {
    CopyFrom(from);
    return *this;
  }
  inline RepoSpec& operator=(RepoSpec&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RepoSpec& default_instance() {
    return *internal_default_instance();
  }
  static inline const RepoSpec* internal_default_instance() {
    return reinterpret_cast<const RepoSpec*>(
               &_RepoSpec_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(RepoSpec& a, RepoSpec& b) {
    a.Swap(&b);
  }
  inline void Swap(RepoSpec* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RepoSpec* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RepoSpec* New() const final {
    return new RepoSpec();
  }

  RepoSpec* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RepoSpec>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RepoSpec& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RepoSpec& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RepoSpec* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RepoSpec";
  }
  protected:
  explicit RepoSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRevisionsFieldNumber = 3,
    kPathFieldNumber = 1,
    kNameFieldNumber = 2,
    kMetadataFieldNumber = 4,
    kCloneOptionsFieldNumber = 6,
    kWalkSubmodulesFieldNumber = 5,
  };
  // repeated string revisions = 3 [json_name = "revisions"];
  int revisions_size() const;
  private:
  int _internal_revisions_size() const;
  public:
  void clear_revisions();
  const std::string& revisions(int index) const;
  std::string* mutable_revisions(int index);
  void set_revisions(int index, const std::string& value);
  void set_revisions(int index, std::string&& value);
  void set_revisions(int index, const char* value);
  void set_revisions(int index, const char* value, size_t size);
  std::string* add_revisions();
  void add_revisions(const std::string& value);
  void add_revisions(std::string&& value);
  void add_revisions(const char* value);
  void add_revisions(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& revisions() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_revisions();
  private:
  const std::string& _internal_revisions(int index) const;
  std::string* _internal_add_revisions();
  public:

  // string path = 1 [json_name = "path"];
  void clear_path();
  const std::string& path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_path();
  PROTOBUF_MUST_USE_RESULT std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // string name = 2 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .Metadata metadata = 4 [json_name = "metadata"];
  bool has_metadata() const;
  private:
  bool _internal_has_metadata() const;
  public:
  void clear_metadata();
  const ::Metadata& metadata() const;
  PROTOBUF_MUST_USE_RESULT ::Metadata* release_metadata();
  ::Metadata* mutable_metadata();
  void set_allocated_metadata(::Metadata* metadata);
  private:
  const ::Metadata& _internal_metadata() const;
  ::Metadata* _internal_mutable_metadata();
  public:
  void unsafe_arena_set_allocated_metadata(
      ::Metadata* metadata);
  ::Metadata* unsafe_arena_release_metadata();

  // .CloneOptions clone_options = 6 [json_name = "clone_options"];
  bool has_clone_options() const;
  private:
  bool _internal_has_clone_options() const;
  public:
  void clear_clone_options();
  const ::CloneOptions& clone_options() const;
  PROTOBUF_MUST_USE_RESULT ::CloneOptions* release_clone_options();
  ::CloneOptions* mutable_clone_options();
  void set_allocated_clone_options(::CloneOptions* clone_options);
  private:
  const ::CloneOptions& _internal_clone_options() const;
  ::CloneOptions* _internal_mutable_clone_options();
  public:
  void unsafe_arena_set_allocated_clone_options(
      ::CloneOptions* clone_options);
  ::CloneOptions* unsafe_arena_release_clone_options();

  // bool walk_submodules = 5 [json_name = "walk_submodules"];
  void clear_walk_submodules();
  bool walk_submodules() const;
  void set_walk_submodules(bool value);
  private:
  bool _internal_walk_submodules() const;
  void _internal_set_walk_submodules(bool value);
  public:

  // @@protoc_insertion_point(class_scope:RepoSpec)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> revisions_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::Metadata* metadata_;
  ::CloneOptions* clone_options_;
  bool walk_submodules_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_config_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// IndexSpec

// string name = 1;
inline void IndexSpec::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& IndexSpec::name() const {
  // @@protoc_insertion_point(field_get:IndexSpec.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void IndexSpec::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:IndexSpec.name)
}
inline std::string* IndexSpec::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:IndexSpec.name)
  return _s;
}
inline const std::string& IndexSpec::_internal_name() const {
  return name_.Get();
}
inline void IndexSpec::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* IndexSpec::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* IndexSpec::release_name() {
  // @@protoc_insertion_point(field_release:IndexSpec.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void IndexSpec::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:IndexSpec.name)
}

// repeated .PathSpec paths = 2 [json_name = "fs_paths"];
inline int IndexSpec::_internal_paths_size() const {
  return paths_.size();
}
inline int IndexSpec::paths_size() const {
  return _internal_paths_size();
}
inline void IndexSpec::clear_paths() {
  paths_.Clear();
}
inline ::PathSpec* IndexSpec::mutable_paths(int index) {
  // @@protoc_insertion_point(field_mutable:IndexSpec.paths)
  return paths_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PathSpec >*
IndexSpec::mutable_paths() {
  // @@protoc_insertion_point(field_mutable_list:IndexSpec.paths)
  return &paths_;
}
inline const ::PathSpec& IndexSpec::_internal_paths(int index) const {
  return paths_.Get(index);
}
inline const ::PathSpec& IndexSpec::paths(int index) const {
  // @@protoc_insertion_point(field_get:IndexSpec.paths)
  return _internal_paths(index);
}
inline ::PathSpec* IndexSpec::_internal_add_paths() {
  return paths_.Add();
}
inline ::PathSpec* IndexSpec::add_paths() {
  ::PathSpec* _add = _internal_add_paths();
  // @@protoc_insertion_point(field_add:IndexSpec.paths)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PathSpec >&
IndexSpec::paths() const {
  // @@protoc_insertion_point(field_list:IndexSpec.paths)
  return paths_;
}

// repeated .RepoSpec repositories = 3 [json_name = "repositories"];
inline int IndexSpec::_internal_repositories_size() const {
  return repositories_.size();
}
inline int IndexSpec::repositories_size() const {
  return _internal_repositories_size();
}
inline void IndexSpec::clear_repositories() {
  repositories_.Clear();
}
inline ::RepoSpec* IndexSpec::mutable_repositories(int index) {
  // @@protoc_insertion_point(field_mutable:IndexSpec.repositories)
  return repositories_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RepoSpec >*
IndexSpec::mutable_repositories() {
  // @@protoc_insertion_point(field_mutable_list:IndexSpec.repositories)
  return &repositories_;
}
inline const ::RepoSpec& IndexSpec::_internal_repositories(int index) const {
  return repositories_.Get(index);
}
inline const ::RepoSpec& IndexSpec::repositories(int index) const {
  // @@protoc_insertion_point(field_get:IndexSpec.repositories)
  return _internal_repositories(index);
}
inline ::RepoSpec* IndexSpec::_internal_add_repositories() {
  return repositories_.Add();
}
inline ::RepoSpec* IndexSpec::add_repositories() {
  ::RepoSpec* _add = _internal_add_repositories();
  // @@protoc_insertion_point(field_add:IndexSpec.repositories)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RepoSpec >&
IndexSpec::repositories() const {
  // @@protoc_insertion_point(field_list:IndexSpec.repositories)
  return repositories_;
}

// -------------------------------------------------------------------

// Metadata

// string url_pattern = 1 [json_name = "url_pattern"];
inline void Metadata::clear_url_pattern() {
  url_pattern_.ClearToEmpty();
}
inline const std::string& Metadata::url_pattern() const {
  // @@protoc_insertion_point(field_get:Metadata.url_pattern)
  return _internal_url_pattern();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Metadata::set_url_pattern(ArgT0&& arg0, ArgT... args) {
 
 url_pattern_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Metadata.url_pattern)
}
inline std::string* Metadata::mutable_url_pattern() {
  std::string* _s = _internal_mutable_url_pattern();
  // @@protoc_insertion_point(field_mutable:Metadata.url_pattern)
  return _s;
}
inline const std::string& Metadata::_internal_url_pattern() const {
  return url_pattern_.Get();
}
inline void Metadata::_internal_set_url_pattern(const std::string& value) {
  
  url_pattern_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Metadata::_internal_mutable_url_pattern() {
  
  return url_pattern_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Metadata::release_url_pattern() {
  // @@protoc_insertion_point(field_release:Metadata.url_pattern)
  return url_pattern_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Metadata::set_allocated_url_pattern(std::string* url_pattern) {
  if (url_pattern != nullptr) {
    
  } else {
    
  }
  url_pattern_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url_pattern,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Metadata.url_pattern)
}

// string remote = 2 [json_name = "remote"];
inline void Metadata::clear_remote() {
  remote_.ClearToEmpty();
}
inline const std::string& Metadata::remote() const {
  // @@protoc_insertion_point(field_get:Metadata.remote)
  return _internal_remote();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Metadata::set_remote(ArgT0&& arg0, ArgT... args) {
 
 remote_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Metadata.remote)
}
inline std::string* Metadata::mutable_remote() {
  std::string* _s = _internal_mutable_remote();
  // @@protoc_insertion_point(field_mutable:Metadata.remote)
  return _s;
}
inline const std::string& Metadata::_internal_remote() const {
  return remote_.Get();
}
inline void Metadata::_internal_set_remote(const std::string& value) {
  
  remote_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Metadata::_internal_mutable_remote() {
  
  return remote_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Metadata::release_remote() {
  // @@protoc_insertion_point(field_release:Metadata.remote)
  return remote_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Metadata::set_allocated_remote(std::string* remote) {
  if (remote != nullptr) {
    
  } else {
    
  }
  remote_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), remote,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Metadata.remote)
}

// string github = 3 [json_name = "github"];
inline void Metadata::clear_github() {
  github_.ClearToEmpty();
}
inline const std::string& Metadata::github() const {
  // @@protoc_insertion_point(field_get:Metadata.github)
  return _internal_github();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Metadata::set_github(ArgT0&& arg0, ArgT... args) {
 
 github_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Metadata.github)
}
inline std::string* Metadata::mutable_github() {
  std::string* _s = _internal_mutable_github();
  // @@protoc_insertion_point(field_mutable:Metadata.github)
  return _s;
}
inline const std::string& Metadata::_internal_github() const {
  return github_.Get();
}
inline void Metadata::_internal_set_github(const std::string& value) {
  
  github_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Metadata::_internal_mutable_github() {
  
  return github_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Metadata::release_github() {
  // @@protoc_insertion_point(field_release:Metadata.github)
  return github_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Metadata::set_allocated_github(std::string* github) {
  if (github != nullptr) {
    
  } else {
    
  }
  github_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), github,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Metadata.github)
}

// repeated string labels = 4 [json_name = "labels"];
inline int Metadata::_internal_labels_size() const {
  return labels_.size();
}
inline int Metadata::labels_size() const {
  return _internal_labels_size();
}
inline void Metadata::clear_labels() {
  labels_.Clear();
}
inline std::string* Metadata::add_labels() {
  std::string* _s = _internal_add_labels();
  // @@protoc_insertion_point(field_add_mutable:Metadata.labels)
  return _s;
}
inline const std::string& Metadata::_internal_labels(int index) const {
  return labels_.Get(index);
}
inline const std::string& Metadata::labels(int index) const {
  // @@protoc_insertion_point(field_get:Metadata.labels)
  return _internal_labels(index);
}
inline std::string* Metadata::mutable_labels(int index) {
  // @@protoc_insertion_point(field_mutable:Metadata.labels)
  return labels_.Mutable(index);
}
inline void Metadata::set_labels(int index, const std::string& value) {
  labels_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:Metadata.labels)
}
inline void Metadata::set_labels(int index, std::string&& value) {
  labels_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:Metadata.labels)
}
inline void Metadata::set_labels(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  labels_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Metadata.labels)
}
inline void Metadata::set_labels(int index, const char* value, size_t size) {
  labels_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Metadata.labels)
}
inline std::string* Metadata::_internal_add_labels() {
  return labels_.Add();
}
inline void Metadata::add_labels(const std::string& value) {
  labels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Metadata.labels)
}
inline void Metadata::add_labels(std::string&& value) {
  labels_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Metadata.labels)
}
inline void Metadata::add_labels(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  labels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Metadata.labels)
}
inline void Metadata::add_labels(const char* value, size_t size) {
  labels_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Metadata.labels)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Metadata::labels() const {
  // @@protoc_insertion_point(field_list:Metadata.labels)
  return labels_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Metadata::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_list:Metadata.labels)
  return &labels_;
}

// -------------------------------------------------------------------

// CloneOptions

// int32 depth = 1 [json_name = "depth"];
inline void CloneOptions::clear_depth() {
  depth_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CloneOptions::_internal_depth() const {
  return depth_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CloneOptions::depth() const {
  // @@protoc_insertion_point(field_get:CloneOptions.depth)
  return _internal_depth();
}
inline void CloneOptions::_internal_set_depth(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  depth_ = value;
}
inline void CloneOptions::set_depth(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_depth(value);
  // @@protoc_insertion_point(field_set:CloneOptions.depth)
}

// string username = 2 [json_name = "username"];
inline void CloneOptions::clear_username() {
  username_.ClearToEmpty();
}
inline const std::string& CloneOptions::username() const {
  // @@protoc_insertion_point(field_get:CloneOptions.username)
  return _internal_username();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CloneOptions::set_username(ArgT0&& arg0, ArgT... args) {
 
 username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CloneOptions.username)
}
inline std::string* CloneOptions::mutable_username() {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:CloneOptions.username)
  return _s;
}
inline const std::string& CloneOptions::_internal_username() const {
  return username_.Get();
}
inline void CloneOptions::_internal_set_username(const std::string& value) {
  
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CloneOptions::_internal_mutable_username() {
  
  return username_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CloneOptions::release_username() {
  // @@protoc_insertion_point(field_release:CloneOptions.username)
  return username_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CloneOptions::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CloneOptions.username)
}

// string password_env = 3 [json_name = "password_env"];
inline void CloneOptions::clear_password_env() {
  password_env_.ClearToEmpty();
}
inline const std::string& CloneOptions::password_env() const {
  // @@protoc_insertion_point(field_get:CloneOptions.password_env)
  return _internal_password_env();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CloneOptions::set_password_env(ArgT0&& arg0, ArgT... args) {
 
 password_env_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CloneOptions.password_env)
}
inline std::string* CloneOptions::mutable_password_env() {
  std::string* _s = _internal_mutable_password_env();
  // @@protoc_insertion_point(field_mutable:CloneOptions.password_env)
  return _s;
}
inline const std::string& CloneOptions::_internal_password_env() const {
  return password_env_.Get();
}
inline void CloneOptions::_internal_set_password_env(const std::string& value) {
  
  password_env_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CloneOptions::_internal_mutable_password_env() {
  
  return password_env_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CloneOptions::release_password_env() {
  // @@protoc_insertion_point(field_release:CloneOptions.password_env)
  return password_env_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CloneOptions::set_allocated_password_env(std::string* password_env) {
  if (password_env != nullptr) {
    
  } else {
    
  }
  password_env_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password_env,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CloneOptions.password_env)
}

// -------------------------------------------------------------------

// PathSpec

// string path = 1 [json_name = "path"];
inline void PathSpec::clear_path() {
  path_.ClearToEmpty();
}
inline const std::string& PathSpec::path() const {
  // @@protoc_insertion_point(field_get:PathSpec.path)
  return _internal_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PathSpec::set_path(ArgT0&& arg0, ArgT... args) {
 
 path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PathSpec.path)
}
inline std::string* PathSpec::mutable_path() {
  std::string* _s = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:PathSpec.path)
  return _s;
}
inline const std::string& PathSpec::_internal_path() const {
  return path_.Get();
}
inline void PathSpec::_internal_set_path(const std::string& value) {
  
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PathSpec::_internal_mutable_path() {
  
  return path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PathSpec::release_path() {
  // @@protoc_insertion_point(field_release:PathSpec.path)
  return path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PathSpec::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:PathSpec.path)
}

// string name = 2 [json_name = "name"];
inline void PathSpec::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& PathSpec::name() const {
  // @@protoc_insertion_point(field_get:PathSpec.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PathSpec::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PathSpec.name)
}
inline std::string* PathSpec::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:PathSpec.name)
  return _s;
}
inline const std::string& PathSpec::_internal_name() const {
  return name_.Get();
}
inline void PathSpec::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PathSpec::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PathSpec::release_name() {
  // @@protoc_insertion_point(field_release:PathSpec.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PathSpec::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:PathSpec.name)
}

// string ordered_contents = 3 [json_name = "ordered_contents"];
inline void PathSpec::clear_ordered_contents() {
  ordered_contents_.ClearToEmpty();
}
inline const std::string& PathSpec::ordered_contents() const {
  // @@protoc_insertion_point(field_get:PathSpec.ordered_contents)
  return _internal_ordered_contents();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PathSpec::set_ordered_contents(ArgT0&& arg0, ArgT... args) {
 
 ordered_contents_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PathSpec.ordered_contents)
}
inline std::string* PathSpec::mutable_ordered_contents() {
  std::string* _s = _internal_mutable_ordered_contents();
  // @@protoc_insertion_point(field_mutable:PathSpec.ordered_contents)
  return _s;
}
inline const std::string& PathSpec::_internal_ordered_contents() const {
  return ordered_contents_.Get();
}
inline void PathSpec::_internal_set_ordered_contents(const std::string& value) {
  
  ordered_contents_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PathSpec::_internal_mutable_ordered_contents() {
  
  return ordered_contents_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PathSpec::release_ordered_contents() {
  // @@protoc_insertion_point(field_release:PathSpec.ordered_contents)
  return ordered_contents_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PathSpec::set_allocated_ordered_contents(std::string* ordered_contents) {
  if (ordered_contents != nullptr) {
    
  } else {
    
  }
  ordered_contents_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ordered_contents,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:PathSpec.ordered_contents)
}

// .Metadata metadata = 4 [json_name = "metadata"];
inline bool PathSpec::_internal_has_metadata() const {
  return this != internal_default_instance() && metadata_ != nullptr;
}
inline bool PathSpec::has_metadata() const {
  return _internal_has_metadata();
}
inline void PathSpec::clear_metadata() {
  if (GetArenaForAllocation() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
}
inline const ::Metadata& PathSpec::_internal_metadata() const {
  const ::Metadata* p = metadata_;
  return p != nullptr ? *p : reinterpret_cast<const ::Metadata&>(
      ::_Metadata_default_instance_);
}
inline const ::Metadata& PathSpec::metadata() const {
  // @@protoc_insertion_point(field_get:PathSpec.metadata)
  return _internal_metadata();
}
inline void PathSpec::unsafe_arena_set_allocated_metadata(
    ::Metadata* metadata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata_);
  }
  metadata_ = metadata;
  if (metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PathSpec.metadata)
}
inline ::Metadata* PathSpec::release_metadata() {
  
  ::Metadata* temp = metadata_;
  metadata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Metadata* PathSpec::unsafe_arena_release_metadata() {
  // @@protoc_insertion_point(field_release:PathSpec.metadata)
  
  ::Metadata* temp = metadata_;
  metadata_ = nullptr;
  return temp;
}
inline ::Metadata* PathSpec::_internal_mutable_metadata() {
  
  if (metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::Metadata>(GetArenaForAllocation());
    metadata_ = p;
  }
  return metadata_;
}
inline ::Metadata* PathSpec::mutable_metadata() {
  ::Metadata* _msg = _internal_mutable_metadata();
  // @@protoc_insertion_point(field_mutable:PathSpec.metadata)
  return _msg;
}
inline void PathSpec::set_allocated_metadata(::Metadata* metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete metadata_;
  }
  if (metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::Metadata>::GetOwningArena(metadata);
    if (message_arena != submessage_arena) {
      metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    
  } else {
    
  }
  metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:PathSpec.metadata)
}

// bool ignore_symlinks = 5 [json_name = "ignore_symlinks"];
inline void PathSpec::clear_ignore_symlinks() {
  ignore_symlinks_ = false;
}
inline bool PathSpec::_internal_ignore_symlinks() const {
  return ignore_symlinks_;
}
inline bool PathSpec::ignore_symlinks() const {
  // @@protoc_insertion_point(field_get:PathSpec.ignore_symlinks)
  return _internal_ignore_symlinks();
}
inline void PathSpec::_internal_set_ignore_symlinks(bool value) {
  
  ignore_symlinks_ = value;
}
inline void PathSpec::set_ignore_symlinks(bool value) {
  _internal_set_ignore_symlinks(value);
  // @@protoc_insertion_point(field_set:PathSpec.ignore_symlinks)
}

// -------------------------------------------------------------------

// RepoSpec

// string path = 1 [json_name = "path"];
inline void RepoSpec::clear_path() {
  path_.ClearToEmpty();
}
inline const std::string& RepoSpec::path() const {
  // @@protoc_insertion_point(field_get:RepoSpec.path)
  return _internal_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RepoSpec::set_path(ArgT0&& arg0, ArgT... args) {
 
 path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:RepoSpec.path)
}
inline std::string* RepoSpec::mutable_path() {
  std::string* _s = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:RepoSpec.path)
  return _s;
}
inline const std::string& RepoSpec::_internal_path() const {
  return path_.Get();
}
inline void RepoSpec::_internal_set_path(const std::string& value) {
  
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RepoSpec::_internal_mutable_path() {
  
  return path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RepoSpec::release_path() {
  // @@protoc_insertion_point(field_release:RepoSpec.path)
  return path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RepoSpec::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:RepoSpec.path)
}

// string name = 2 [json_name = "name"];
inline void RepoSpec::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& RepoSpec::name() const {
  // @@protoc_insertion_point(field_get:RepoSpec.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RepoSpec::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:RepoSpec.name)
}
inline std::string* RepoSpec::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:RepoSpec.name)
  return _s;
}
inline const std::string& RepoSpec::_internal_name() const {
  return name_.Get();
}
inline void RepoSpec::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RepoSpec::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RepoSpec::release_name() {
  // @@protoc_insertion_point(field_release:RepoSpec.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RepoSpec::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:RepoSpec.name)
}

// repeated string revisions = 3 [json_name = "revisions"];
inline int RepoSpec::_internal_revisions_size() const {
  return revisions_.size();
}
inline int RepoSpec::revisions_size() const {
  return _internal_revisions_size();
}
inline void RepoSpec::clear_revisions() {
  revisions_.Clear();
}
inline std::string* RepoSpec::add_revisions() {
  std::string* _s = _internal_add_revisions();
  // @@protoc_insertion_point(field_add_mutable:RepoSpec.revisions)
  return _s;
}
inline const std::string& RepoSpec::_internal_revisions(int index) const {
  return revisions_.Get(index);
}
inline const std::string& RepoSpec::revisions(int index) const {
  // @@protoc_insertion_point(field_get:RepoSpec.revisions)
  return _internal_revisions(index);
}
inline std::string* RepoSpec::mutable_revisions(int index) {
  // @@protoc_insertion_point(field_mutable:RepoSpec.revisions)
  return revisions_.Mutable(index);
}
inline void RepoSpec::set_revisions(int index, const std::string& value) {
  revisions_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:RepoSpec.revisions)
}
inline void RepoSpec::set_revisions(int index, std::string&& value) {
  revisions_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:RepoSpec.revisions)
}
inline void RepoSpec::set_revisions(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  revisions_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:RepoSpec.revisions)
}
inline void RepoSpec::set_revisions(int index, const char* value, size_t size) {
  revisions_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:RepoSpec.revisions)
}
inline std::string* RepoSpec::_internal_add_revisions() {
  return revisions_.Add();
}
inline void RepoSpec::add_revisions(const std::string& value) {
  revisions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:RepoSpec.revisions)
}
inline void RepoSpec::add_revisions(std::string&& value) {
  revisions_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:RepoSpec.revisions)
}
inline void RepoSpec::add_revisions(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  revisions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:RepoSpec.revisions)
}
inline void RepoSpec::add_revisions(const char* value, size_t size) {
  revisions_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:RepoSpec.revisions)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
RepoSpec::revisions() const {
  // @@protoc_insertion_point(field_list:RepoSpec.revisions)
  return revisions_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
RepoSpec::mutable_revisions() {
  // @@protoc_insertion_point(field_mutable_list:RepoSpec.revisions)
  return &revisions_;
}

// .Metadata metadata = 4 [json_name = "metadata"];
inline bool RepoSpec::_internal_has_metadata() const {
  return this != internal_default_instance() && metadata_ != nullptr;
}
inline bool RepoSpec::has_metadata() const {
  return _internal_has_metadata();
}
inline void RepoSpec::clear_metadata() {
  if (GetArenaForAllocation() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
}
inline const ::Metadata& RepoSpec::_internal_metadata() const {
  const ::Metadata* p = metadata_;
  return p != nullptr ? *p : reinterpret_cast<const ::Metadata&>(
      ::_Metadata_default_instance_);
}
inline const ::Metadata& RepoSpec::metadata() const {
  // @@protoc_insertion_point(field_get:RepoSpec.metadata)
  return _internal_metadata();
}
inline void RepoSpec::unsafe_arena_set_allocated_metadata(
    ::Metadata* metadata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata_);
  }
  metadata_ = metadata;
  if (metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RepoSpec.metadata)
}
inline ::Metadata* RepoSpec::release_metadata() {
  
  ::Metadata* temp = metadata_;
  metadata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Metadata* RepoSpec::unsafe_arena_release_metadata() {
  // @@protoc_insertion_point(field_release:RepoSpec.metadata)
  
  ::Metadata* temp = metadata_;
  metadata_ = nullptr;
  return temp;
}
inline ::Metadata* RepoSpec::_internal_mutable_metadata() {
  
  if (metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::Metadata>(GetArenaForAllocation());
    metadata_ = p;
  }
  return metadata_;
}
inline ::Metadata* RepoSpec::mutable_metadata() {
  ::Metadata* _msg = _internal_mutable_metadata();
  // @@protoc_insertion_point(field_mutable:RepoSpec.metadata)
  return _msg;
}
inline void RepoSpec::set_allocated_metadata(::Metadata* metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete metadata_;
  }
  if (metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::Metadata>::GetOwningArena(metadata);
    if (message_arena != submessage_arena) {
      metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    
  } else {
    
  }
  metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:RepoSpec.metadata)
}

// bool walk_submodules = 5 [json_name = "walk_submodules"];
inline void RepoSpec::clear_walk_submodules() {
  walk_submodules_ = false;
}
inline bool RepoSpec::_internal_walk_submodules() const {
  return walk_submodules_;
}
inline bool RepoSpec::walk_submodules() const {
  // @@protoc_insertion_point(field_get:RepoSpec.walk_submodules)
  return _internal_walk_submodules();
}
inline void RepoSpec::_internal_set_walk_submodules(bool value) {
  
  walk_submodules_ = value;
}
inline void RepoSpec::set_walk_submodules(bool value) {
  _internal_set_walk_submodules(value);
  // @@protoc_insertion_point(field_set:RepoSpec.walk_submodules)
}

// .CloneOptions clone_options = 6 [json_name = "clone_options"];
inline bool RepoSpec::_internal_has_clone_options() const {
  return this != internal_default_instance() && clone_options_ != nullptr;
}
inline bool RepoSpec::has_clone_options() const {
  return _internal_has_clone_options();
}
inline void RepoSpec::clear_clone_options() {
  if (GetArenaForAllocation() == nullptr && clone_options_ != nullptr) {
    delete clone_options_;
  }
  clone_options_ = nullptr;
}
inline const ::CloneOptions& RepoSpec::_internal_clone_options() const {
  const ::CloneOptions* p = clone_options_;
  return p != nullptr ? *p : reinterpret_cast<const ::CloneOptions&>(
      ::_CloneOptions_default_instance_);
}
inline const ::CloneOptions& RepoSpec::clone_options() const {
  // @@protoc_insertion_point(field_get:RepoSpec.clone_options)
  return _internal_clone_options();
}
inline void RepoSpec::unsafe_arena_set_allocated_clone_options(
    ::CloneOptions* clone_options) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(clone_options_);
  }
  clone_options_ = clone_options;
  if (clone_options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RepoSpec.clone_options)
}
inline ::CloneOptions* RepoSpec::release_clone_options() {
  
  ::CloneOptions* temp = clone_options_;
  clone_options_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CloneOptions* RepoSpec::unsafe_arena_release_clone_options() {
  // @@protoc_insertion_point(field_release:RepoSpec.clone_options)
  
  ::CloneOptions* temp = clone_options_;
  clone_options_ = nullptr;
  return temp;
}
inline ::CloneOptions* RepoSpec::_internal_mutable_clone_options() {
  
  if (clone_options_ == nullptr) {
    auto* p = CreateMaybeMessage<::CloneOptions>(GetArenaForAllocation());
    clone_options_ = p;
  }
  return clone_options_;
}
inline ::CloneOptions* RepoSpec::mutable_clone_options() {
  ::CloneOptions* _msg = _internal_mutable_clone_options();
  // @@protoc_insertion_point(field_mutable:RepoSpec.clone_options)
  return _msg;
}
inline void RepoSpec::set_allocated_clone_options(::CloneOptions* clone_options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete clone_options_;
  }
  if (clone_options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CloneOptions>::GetOwningArena(clone_options);
    if (message_arena != submessage_arena) {
      clone_options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, clone_options, submessage_arena);
    }
    
  } else {
    
  }
  clone_options_ = clone_options;
  // @@protoc_insertion_point(field_set_allocated:RepoSpec.clone_options)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_config_2eproto
