// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.4
// source: livegrep.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CodeSearchClient is the client API for CodeSearch service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CodeSearchClient interface {
	Info(ctx context.Context, in *InfoRequest, opts ...grpc.CallOption) (*ServerInfo, error)
	Search(ctx context.Context, in *Query, opts ...grpc.CallOption) (*CodeSearchResult, error)
	Reload(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
}

type codeSearchClient struct {
	cc grpc.ClientConnInterface
}

func NewCodeSearchClient(cc grpc.ClientConnInterface) CodeSearchClient {
	return &codeSearchClient{cc}
}

func (c *codeSearchClient) Info(ctx context.Context, in *InfoRequest, opts ...grpc.CallOption) (*ServerInfo, error) {
	out := new(ServerInfo)
	err := c.cc.Invoke(ctx, "/CodeSearch/Info", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *codeSearchClient) Search(ctx context.Context, in *Query, opts ...grpc.CallOption) (*CodeSearchResult, error) {
	out := new(CodeSearchResult)
	err := c.cc.Invoke(ctx, "/CodeSearch/Search", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *codeSearchClient) Reload(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/CodeSearch/Reload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CodeSearchServer is the server API for CodeSearch service.
// All implementations must embed UnimplementedCodeSearchServer
// for forward compatibility
type CodeSearchServer interface {
	Info(context.Context, *InfoRequest) (*ServerInfo, error)
	Search(context.Context, *Query) (*CodeSearchResult, error)
	Reload(context.Context, *Empty) (*Empty, error)
	mustEmbedUnimplementedCodeSearchServer()
}

// UnimplementedCodeSearchServer must be embedded to have forward compatible implementations.
type UnimplementedCodeSearchServer struct {
}

func (UnimplementedCodeSearchServer) Info(context.Context, *InfoRequest) (*ServerInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Info not implemented")
}
func (UnimplementedCodeSearchServer) Search(context.Context, *Query) (*CodeSearchResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (UnimplementedCodeSearchServer) Reload(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reload not implemented")
}
func (UnimplementedCodeSearchServer) mustEmbedUnimplementedCodeSearchServer() {}

// UnsafeCodeSearchServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CodeSearchServer will
// result in compilation errors.
type UnsafeCodeSearchServer interface {
	mustEmbedUnimplementedCodeSearchServer()
}

func RegisterCodeSearchServer(s grpc.ServiceRegistrar, srv CodeSearchServer) {
	s.RegisterService(&CodeSearch_ServiceDesc, srv)
}

func _CodeSearch_Info_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CodeSearchServer).Info(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CodeSearch/Info",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CodeSearchServer).Info(ctx, req.(*InfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CodeSearch_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Query)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CodeSearchServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CodeSearch/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CodeSearchServer).Search(ctx, req.(*Query))
	}
	return interceptor(ctx, in, info, handler)
}

func _CodeSearch_Reload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CodeSearchServer).Reload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CodeSearch/Reload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CodeSearchServer).Reload(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// CodeSearch_ServiceDesc is the grpc.ServiceDesc for CodeSearch service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CodeSearch_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "CodeSearch",
	HandlerType: (*CodeSearchServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Info",
			Handler:    _CodeSearch_Info_Handler,
		},
		{
			MethodName: "Search",
			Handler:    _CodeSearch_Search_Handler,
		},
		{
			MethodName: "Reload",
			Handler:    _CodeSearch_Reload_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "livegrep.proto",
}
