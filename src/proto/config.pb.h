// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_config_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_config_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4024000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4024004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_config_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_config_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_config_2eproto;
class CloneOptions;
struct CloneOptionsDefaultTypeInternal;
extern CloneOptionsDefaultTypeInternal _CloneOptions_default_instance_;
class IndexSpec;
struct IndexSpecDefaultTypeInternal;
extern IndexSpecDefaultTypeInternal _IndexSpec_default_instance_;
class Metadata;
struct MetadataDefaultTypeInternal;
extern MetadataDefaultTypeInternal _Metadata_default_instance_;
class PathSpec;
struct PathSpecDefaultTypeInternal;
extern PathSpecDefaultTypeInternal _PathSpec_default_instance_;
class RepoSpec;
struct RepoSpecDefaultTypeInternal;
extern RepoSpecDefaultTypeInternal _RepoSpec_default_instance_;
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google


// ===================================================================


// -------------------------------------------------------------------

class IndexSpec final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:IndexSpec) */ {
 public:
  inline IndexSpec() : IndexSpec(nullptr) {}
  ~IndexSpec() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR IndexSpec(::google::protobuf::internal::ConstantInitialized);

  IndexSpec(const IndexSpec& from);
  IndexSpec(IndexSpec&& from) noexcept
    : IndexSpec() {
    *this = ::std::move(from);
  }

  inline IndexSpec& operator=(const IndexSpec& from) {
    CopyFrom(from);
    return *this;
  }
  inline IndexSpec& operator=(IndexSpec&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IndexSpec& default_instance() {
    return *internal_default_instance();
  }
  static inline const IndexSpec* internal_default_instance() {
    return reinterpret_cast<const IndexSpec*>(
               &_IndexSpec_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(IndexSpec& a, IndexSpec& b) {
    a.Swap(&b);
  }
  inline void Swap(IndexSpec* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IndexSpec* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IndexSpec* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IndexSpec>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const IndexSpec& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const IndexSpec& from) {
    IndexSpec::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IndexSpec* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "IndexSpec";
  }
  protected:
  explicit IndexSpec(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathsFieldNumber = 2,
    kRepositoriesFieldNumber = 3,
    kNameFieldNumber = 1,
  };
  // repeated .PathSpec paths = 2 [json_name = "fs_paths"];
  int paths_size() const;
  private:
  int _internal_paths_size() const;

  public:
  void clear_paths() ;
  ::PathSpec* mutable_paths(int index);
  ::google::protobuf::RepeatedPtrField< ::PathSpec >*
      mutable_paths();
  private:
  const ::google::protobuf::RepeatedPtrField<::PathSpec>& _internal_paths() const;
  ::google::protobuf::RepeatedPtrField<::PathSpec>* _internal_mutable_paths();
  public:
  const ::PathSpec& paths(int index) const;
  ::PathSpec* add_paths();
  const ::google::protobuf::RepeatedPtrField< ::PathSpec >&
      paths() const;
  // repeated .RepoSpec repositories = 3 [json_name = "repositories"];
  int repositories_size() const;
  private:
  int _internal_repositories_size() const;

  public:
  void clear_repositories() ;
  ::RepoSpec* mutable_repositories(int index);
  ::google::protobuf::RepeatedPtrField< ::RepoSpec >*
      mutable_repositories();
  private:
  const ::google::protobuf::RepeatedPtrField<::RepoSpec>& _internal_repositories() const;
  ::google::protobuf::RepeatedPtrField<::RepoSpec>* _internal_mutable_repositories();
  public:
  const ::RepoSpec& repositories(int index) const;
  ::RepoSpec* add_repositories();
  const ::google::protobuf::RepeatedPtrField< ::RepoSpec >&
      repositories() const;
  // string name = 1;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // @@protoc_insertion_point(class_scope:IndexSpec)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 3, 2, 22, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedPtrField< ::PathSpec > paths_;
    ::google::protobuf::RepeatedPtrField< ::RepoSpec > repositories_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_config_2eproto;
};// -------------------------------------------------------------------

class Metadata final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Metadata) */ {
 public:
  inline Metadata() : Metadata(nullptr) {}
  ~Metadata() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Metadata(::google::protobuf::internal::ConstantInitialized);

  Metadata(const Metadata& from);
  Metadata(Metadata&& from) noexcept
    : Metadata() {
    *this = ::std::move(from);
  }

  inline Metadata& operator=(const Metadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline Metadata& operator=(Metadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Metadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const Metadata* internal_default_instance() {
    return reinterpret_cast<const Metadata*>(
               &_Metadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Metadata& a, Metadata& b) {
    a.Swap(&b);
  }
  inline void Swap(Metadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Metadata* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Metadata* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Metadata>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Metadata& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Metadata& from) {
    Metadata::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Metadata* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Metadata";
  }
  protected:
  explicit Metadata(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLabelsFieldNumber = 4,
    kUrlPatternFieldNumber = 1,
    kRemoteFieldNumber = 2,
    kGithubFieldNumber = 3,
  };
  // repeated string labels = 4 [json_name = "labels"];
  int labels_size() const;
  private:
  int _internal_labels_size() const;

  public:
  void clear_labels() ;
  const std::string& labels(int index) const;
  std::string* mutable_labels(int index);
  void set_labels(int index, const std::string& value);
  void set_labels(int index, std::string&& value);
  void set_labels(int index, const char* value);
  void set_labels(int index, const char* value, std::size_t size);
  void set_labels(int index, absl::string_view value);
  std::string* add_labels();
  void add_labels(const std::string& value);
  void add_labels(std::string&& value);
  void add_labels(const char* value);
  void add_labels(const char* value, std::size_t size);
  void add_labels(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& labels() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_labels();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_labels() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_labels();

  public:
  // string url_pattern = 1 [json_name = "url_pattern"];
  void clear_url_pattern() ;
  const std::string& url_pattern() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_url_pattern(Arg_&& arg, Args_... args);
  std::string* mutable_url_pattern();
  PROTOBUF_NODISCARD std::string* release_url_pattern();
  void set_allocated_url_pattern(std::string* ptr);

  private:
  const std::string& _internal_url_pattern() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url_pattern(
      const std::string& value);
  std::string* _internal_mutable_url_pattern();

  public:
  // string remote = 2 [json_name = "remote"];
  void clear_remote() ;
  const std::string& remote() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_remote(Arg_&& arg, Args_... args);
  std::string* mutable_remote();
  PROTOBUF_NODISCARD std::string* release_remote();
  void set_allocated_remote(std::string* ptr);

  private:
  const std::string& _internal_remote() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_remote(
      const std::string& value);
  std::string* _internal_mutable_remote();

  public:
  // string github = 3 [json_name = "github"];
  void clear_github() ;
  const std::string& github() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_github(Arg_&& arg, Args_... args);
  std::string* mutable_github();
  PROTOBUF_NODISCARD std::string* release_github();
  void set_allocated_github(std::string* ptr);

  private:
  const std::string& _internal_github() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_github(
      const std::string& value);
  std::string* _internal_mutable_github();

  public:
  // @@protoc_insertion_point(class_scope:Metadata)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 4, 0, 46, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedPtrField<std::string> labels_;
    ::google::protobuf::internal::ArenaStringPtr url_pattern_;
    ::google::protobuf::internal::ArenaStringPtr remote_;
    ::google::protobuf::internal::ArenaStringPtr github_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_config_2eproto;
};// -------------------------------------------------------------------

class CloneOptions final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CloneOptions) */ {
 public:
  inline CloneOptions() : CloneOptions(nullptr) {}
  ~CloneOptions() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CloneOptions(::google::protobuf::internal::ConstantInitialized);

  CloneOptions(const CloneOptions& from);
  CloneOptions(CloneOptions&& from) noexcept
    : CloneOptions() {
    *this = ::std::move(from);
  }

  inline CloneOptions& operator=(const CloneOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline CloneOptions& operator=(CloneOptions&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CloneOptions& default_instance() {
    return *internal_default_instance();
  }
  static inline const CloneOptions* internal_default_instance() {
    return reinterpret_cast<const CloneOptions*>(
               &_CloneOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CloneOptions& a, CloneOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(CloneOptions* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CloneOptions* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CloneOptions* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CloneOptions>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CloneOptions& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const CloneOptions& from) {
    CloneOptions::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CloneOptions* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "CloneOptions";
  }
  protected:
  explicit CloneOptions(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 2,
    kPasswordEnvFieldNumber = 3,
    kDepthFieldNumber = 1,
  };
  // string username = 2 [json_name = "username"];
  void clear_username() ;
  const std::string& username() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_username(Arg_&& arg, Args_... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* ptr);

  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(
      const std::string& value);
  std::string* _internal_mutable_username();

  public:
  // string password_env = 3 [json_name = "password_env"];
  void clear_password_env() ;
  const std::string& password_env() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_password_env(Arg_&& arg, Args_... args);
  std::string* mutable_password_env();
  PROTOBUF_NODISCARD std::string* release_password_env();
  void set_allocated_password_env(std::string* ptr);

  private:
  const std::string& _internal_password_env() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password_env(
      const std::string& value);
  std::string* _internal_mutable_password_env();

  public:
  // int32 depth = 1 [json_name = "depth"];
  void clear_depth() ;
  ::int32_t depth() const;
  void set_depth(::int32_t value);

  private:
  ::int32_t _internal_depth() const;
  void _internal_set_depth(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:CloneOptions)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 3, 0, 41, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::ArenaStringPtr username_;
    ::google::protobuf::internal::ArenaStringPtr password_env_;
    ::int32_t depth_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_config_2eproto;
};// -------------------------------------------------------------------

class PathSpec final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:PathSpec) */ {
 public:
  inline PathSpec() : PathSpec(nullptr) {}
  ~PathSpec() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PathSpec(::google::protobuf::internal::ConstantInitialized);

  PathSpec(const PathSpec& from);
  PathSpec(PathSpec&& from) noexcept
    : PathSpec() {
    *this = ::std::move(from);
  }

  inline PathSpec& operator=(const PathSpec& from) {
    CopyFrom(from);
    return *this;
  }
  inline PathSpec& operator=(PathSpec&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PathSpec& default_instance() {
    return *internal_default_instance();
  }
  static inline const PathSpec* internal_default_instance() {
    return reinterpret_cast<const PathSpec*>(
               &_PathSpec_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PathSpec& a, PathSpec& b) {
    a.Swap(&b);
  }
  inline void Swap(PathSpec* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PathSpec* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PathSpec* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PathSpec>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PathSpec& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const PathSpec& from) {
    PathSpec::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PathSpec* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "PathSpec";
  }
  protected:
  explicit PathSpec(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 1,
    kNameFieldNumber = 2,
    kOrderedContentsFieldNumber = 3,
    kMetadataFieldNumber = 4,
    kIgnoreSymlinksFieldNumber = 5,
  };
  // string path = 1 [json_name = "path"];
  void clear_path() ;
  const std::string& path() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_path(Arg_&& arg, Args_... args);
  std::string* mutable_path();
  PROTOBUF_NODISCARD std::string* release_path();
  void set_allocated_path(std::string* ptr);

  private:
  const std::string& _internal_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path(
      const std::string& value);
  std::string* _internal_mutable_path();

  public:
  // string name = 2 [json_name = "name"];
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string ordered_contents = 3 [json_name = "ordered_contents"];
  void clear_ordered_contents() ;
  const std::string& ordered_contents() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_ordered_contents(Arg_&& arg, Args_... args);
  std::string* mutable_ordered_contents();
  PROTOBUF_NODISCARD std::string* release_ordered_contents();
  void set_allocated_ordered_contents(std::string* ptr);

  private:
  const std::string& _internal_ordered_contents() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ordered_contents(
      const std::string& value);
  std::string* _internal_mutable_ordered_contents();

  public:
  // .Metadata metadata = 4 [json_name = "metadata"];
  bool has_metadata() const;
  void clear_metadata() ;
  const ::Metadata& metadata() const;
  PROTOBUF_NODISCARD ::Metadata* release_metadata();
  ::Metadata* mutable_metadata();
  void set_allocated_metadata(::Metadata* value);
  void unsafe_arena_set_allocated_metadata(::Metadata* value);
  ::Metadata* unsafe_arena_release_metadata();

  private:
  const ::Metadata& _internal_metadata() const;
  ::Metadata* _internal_mutable_metadata();

  public:
  // bool ignore_symlinks = 5 [json_name = "ignore_symlinks"];
  void clear_ignore_symlinks() ;
  bool ignore_symlinks() const;
  void set_ignore_symlinks(bool value);

  private:
  bool _internal_ignore_symlinks() const;
  void _internal_set_ignore_symlinks(bool value);

  public:
  // @@protoc_insertion_point(class_scope:PathSpec)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 5, 1, 41, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr path_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr ordered_contents_;
    ::Metadata* metadata_;
    bool ignore_symlinks_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_config_2eproto;
};// -------------------------------------------------------------------

class RepoSpec final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:RepoSpec) */ {
 public:
  inline RepoSpec() : RepoSpec(nullptr) {}
  ~RepoSpec() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR RepoSpec(::google::protobuf::internal::ConstantInitialized);

  RepoSpec(const RepoSpec& from);
  RepoSpec(RepoSpec&& from) noexcept
    : RepoSpec() {
    *this = ::std::move(from);
  }

  inline RepoSpec& operator=(const RepoSpec& from) {
    CopyFrom(from);
    return *this;
  }
  inline RepoSpec& operator=(RepoSpec&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RepoSpec& default_instance() {
    return *internal_default_instance();
  }
  static inline const RepoSpec* internal_default_instance() {
    return reinterpret_cast<const RepoSpec*>(
               &_RepoSpec_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(RepoSpec& a, RepoSpec& b) {
    a.Swap(&b);
  }
  inline void Swap(RepoSpec* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RepoSpec* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RepoSpec* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RepoSpec>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RepoSpec& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const RepoSpec& from) {
    RepoSpec::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RepoSpec* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "RepoSpec";
  }
  protected:
  explicit RepoSpec(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRevisionsFieldNumber = 3,
    kPathFieldNumber = 1,
    kNameFieldNumber = 2,
    kMetadataFieldNumber = 4,
    kCloneOptionsFieldNumber = 6,
    kWalkSubmodulesFieldNumber = 5,
  };
  // repeated string revisions = 3 [json_name = "revisions"];
  int revisions_size() const;
  private:
  int _internal_revisions_size() const;

  public:
  void clear_revisions() ;
  const std::string& revisions(int index) const;
  std::string* mutable_revisions(int index);
  void set_revisions(int index, const std::string& value);
  void set_revisions(int index, std::string&& value);
  void set_revisions(int index, const char* value);
  void set_revisions(int index, const char* value, std::size_t size);
  void set_revisions(int index, absl::string_view value);
  std::string* add_revisions();
  void add_revisions(const std::string& value);
  void add_revisions(std::string&& value);
  void add_revisions(const char* value);
  void add_revisions(const char* value, std::size_t size);
  void add_revisions(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& revisions() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_revisions();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_revisions() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_revisions();

  public:
  // string path = 1 [json_name = "path"];
  void clear_path() ;
  const std::string& path() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_path(Arg_&& arg, Args_... args);
  std::string* mutable_path();
  PROTOBUF_NODISCARD std::string* release_path();
  void set_allocated_path(std::string* ptr);

  private:
  const std::string& _internal_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path(
      const std::string& value);
  std::string* _internal_mutable_path();

  public:
  // string name = 2 [json_name = "name"];
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // .Metadata metadata = 4 [json_name = "metadata"];
  bool has_metadata() const;
  void clear_metadata() ;
  const ::Metadata& metadata() const;
  PROTOBUF_NODISCARD ::Metadata* release_metadata();
  ::Metadata* mutable_metadata();
  void set_allocated_metadata(::Metadata* value);
  void unsafe_arena_set_allocated_metadata(::Metadata* value);
  ::Metadata* unsafe_arena_release_metadata();

  private:
  const ::Metadata& _internal_metadata() const;
  ::Metadata* _internal_mutable_metadata();

  public:
  // .CloneOptions clone_options = 6 [json_name = "clone_options"];
  bool has_clone_options() const;
  void clear_clone_options() ;
  const ::CloneOptions& clone_options() const;
  PROTOBUF_NODISCARD ::CloneOptions* release_clone_options();
  ::CloneOptions* mutable_clone_options();
  void set_allocated_clone_options(::CloneOptions* value);
  void unsafe_arena_set_allocated_clone_options(::CloneOptions* value);
  ::CloneOptions* unsafe_arena_release_clone_options();

  private:
  const ::CloneOptions& _internal_clone_options() const;
  ::CloneOptions* _internal_mutable_clone_options();

  public:
  // bool walk_submodules = 5 [json_name = "walk_submodules"];
  void clear_walk_submodules() ;
  bool walk_submodules() const;
  void set_walk_submodules(bool value);

  private:
  bool _internal_walk_submodules() const;
  void _internal_set_walk_submodules(bool value);

  public:
  // @@protoc_insertion_point(class_scope:RepoSpec)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 6, 2, 34, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField<std::string> revisions_;
    ::google::protobuf::internal::ArenaStringPtr path_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::Metadata* metadata_;
    ::CloneOptions* clone_options_;
    bool walk_submodules_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_config_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// IndexSpec

// string name = 1;
inline void IndexSpec::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& IndexSpec::name() const {
  // @@protoc_insertion_point(field_get:IndexSpec.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void IndexSpec::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:IndexSpec.name)
}
inline std::string* IndexSpec::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:IndexSpec.name)
  return _s;
}
inline const std::string& IndexSpec::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void IndexSpec::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* IndexSpec::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* IndexSpec::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:IndexSpec.name)
  return _impl_.name_.Release();
}
inline void IndexSpec::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:IndexSpec.name)
}

// repeated .PathSpec paths = 2 [json_name = "fs_paths"];
inline int IndexSpec::_internal_paths_size() const {
  return _internal_paths().size();
}
inline int IndexSpec::paths_size() const {
  return _internal_paths_size();
}
inline void IndexSpec::clear_paths() {
  _internal_mutable_paths()->Clear();
}
inline ::PathSpec* IndexSpec::mutable_paths(int index) {
  // @@protoc_insertion_point(field_mutable:IndexSpec.paths)
  return _internal_mutable_paths()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::PathSpec >*
IndexSpec::mutable_paths() {
  // @@protoc_insertion_point(field_mutable_list:IndexSpec.paths)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_paths();
}
inline const ::PathSpec& IndexSpec::paths(int index) const {
  // @@protoc_insertion_point(field_get:IndexSpec.paths)
    return _internal_paths().Get(index);
}
inline ::PathSpec* IndexSpec::add_paths() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::PathSpec* _add = _internal_mutable_paths()->Add();
  // @@protoc_insertion_point(field_add:IndexSpec.paths)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::PathSpec >&
IndexSpec::paths() const {
  // @@protoc_insertion_point(field_list:IndexSpec.paths)
  return _internal_paths();
}
inline const ::google::protobuf::RepeatedPtrField<::PathSpec>&
IndexSpec::_internal_paths() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.paths_;
}
inline ::google::protobuf::RepeatedPtrField<::PathSpec>*
IndexSpec::_internal_mutable_paths() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.paths_;
}

// repeated .RepoSpec repositories = 3 [json_name = "repositories"];
inline int IndexSpec::_internal_repositories_size() const {
  return _internal_repositories().size();
}
inline int IndexSpec::repositories_size() const {
  return _internal_repositories_size();
}
inline void IndexSpec::clear_repositories() {
  _internal_mutable_repositories()->Clear();
}
inline ::RepoSpec* IndexSpec::mutable_repositories(int index) {
  // @@protoc_insertion_point(field_mutable:IndexSpec.repositories)
  return _internal_mutable_repositories()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::RepoSpec >*
IndexSpec::mutable_repositories() {
  // @@protoc_insertion_point(field_mutable_list:IndexSpec.repositories)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_repositories();
}
inline const ::RepoSpec& IndexSpec::repositories(int index) const {
  // @@protoc_insertion_point(field_get:IndexSpec.repositories)
    return _internal_repositories().Get(index);
}
inline ::RepoSpec* IndexSpec::add_repositories() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::RepoSpec* _add = _internal_mutable_repositories()->Add();
  // @@protoc_insertion_point(field_add:IndexSpec.repositories)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::RepoSpec >&
IndexSpec::repositories() const {
  // @@protoc_insertion_point(field_list:IndexSpec.repositories)
  return _internal_repositories();
}
inline const ::google::protobuf::RepeatedPtrField<::RepoSpec>&
IndexSpec::_internal_repositories() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.repositories_;
}
inline ::google::protobuf::RepeatedPtrField<::RepoSpec>*
IndexSpec::_internal_mutable_repositories() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.repositories_;
}

// -------------------------------------------------------------------

// Metadata

// string url_pattern = 1 [json_name = "url_pattern"];
inline void Metadata::clear_url_pattern() {
  _impl_.url_pattern_.ClearToEmpty();
}
inline const std::string& Metadata::url_pattern() const {
  // @@protoc_insertion_point(field_get:Metadata.url_pattern)
  return _internal_url_pattern();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Metadata::set_url_pattern(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.url_pattern_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Metadata.url_pattern)
}
inline std::string* Metadata::mutable_url_pattern() {
  std::string* _s = _internal_mutable_url_pattern();
  // @@protoc_insertion_point(field_mutable:Metadata.url_pattern)
  return _s;
}
inline const std::string& Metadata::_internal_url_pattern() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.url_pattern_.Get();
}
inline void Metadata::_internal_set_url_pattern(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.url_pattern_.Set(value, GetArenaForAllocation());
}
inline std::string* Metadata::_internal_mutable_url_pattern() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.url_pattern_.Mutable( GetArenaForAllocation());
}
inline std::string* Metadata::release_url_pattern() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Metadata.url_pattern)
  return _impl_.url_pattern_.Release();
}
inline void Metadata::set_allocated_url_pattern(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.url_pattern_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.url_pattern_.IsDefault()) {
          _impl_.url_pattern_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Metadata.url_pattern)
}

// string remote = 2 [json_name = "remote"];
inline void Metadata::clear_remote() {
  _impl_.remote_.ClearToEmpty();
}
inline const std::string& Metadata::remote() const {
  // @@protoc_insertion_point(field_get:Metadata.remote)
  return _internal_remote();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Metadata::set_remote(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.remote_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Metadata.remote)
}
inline std::string* Metadata::mutable_remote() {
  std::string* _s = _internal_mutable_remote();
  // @@protoc_insertion_point(field_mutable:Metadata.remote)
  return _s;
}
inline const std::string& Metadata::_internal_remote() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.remote_.Get();
}
inline void Metadata::_internal_set_remote(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.remote_.Set(value, GetArenaForAllocation());
}
inline std::string* Metadata::_internal_mutable_remote() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.remote_.Mutable( GetArenaForAllocation());
}
inline std::string* Metadata::release_remote() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Metadata.remote)
  return _impl_.remote_.Release();
}
inline void Metadata::set_allocated_remote(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.remote_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.remote_.IsDefault()) {
          _impl_.remote_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Metadata.remote)
}

// string github = 3 [json_name = "github"];
inline void Metadata::clear_github() {
  _impl_.github_.ClearToEmpty();
}
inline const std::string& Metadata::github() const {
  // @@protoc_insertion_point(field_get:Metadata.github)
  return _internal_github();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Metadata::set_github(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.github_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Metadata.github)
}
inline std::string* Metadata::mutable_github() {
  std::string* _s = _internal_mutable_github();
  // @@protoc_insertion_point(field_mutable:Metadata.github)
  return _s;
}
inline const std::string& Metadata::_internal_github() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.github_.Get();
}
inline void Metadata::_internal_set_github(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.github_.Set(value, GetArenaForAllocation());
}
inline std::string* Metadata::_internal_mutable_github() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.github_.Mutable( GetArenaForAllocation());
}
inline std::string* Metadata::release_github() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Metadata.github)
  return _impl_.github_.Release();
}
inline void Metadata::set_allocated_github(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.github_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.github_.IsDefault()) {
          _impl_.github_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Metadata.github)
}

// repeated string labels = 4 [json_name = "labels"];
inline int Metadata::_internal_labels_size() const {
  return _internal_labels().size();
}
inline int Metadata::labels_size() const {
  return _internal_labels_size();
}
inline void Metadata::clear_labels() {
  _internal_mutable_labels()->Clear();
}
inline std::string* Metadata::add_labels() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_labels()->Add();
  // @@protoc_insertion_point(field_add_mutable:Metadata.labels)
  return _s;
}
inline const std::string& Metadata::labels(int index) const {
  // @@protoc_insertion_point(field_get:Metadata.labels)
  return _internal_labels().Get(index);
}
inline std::string* Metadata::mutable_labels(int index) {
  // @@protoc_insertion_point(field_mutable:Metadata.labels)
  return _internal_mutable_labels()->Mutable(index);
}
inline void Metadata::set_labels(int index, const std::string& value) {
  _internal_mutable_labels()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:Metadata.labels)
}
inline void Metadata::set_labels(int index, std::string&& value) {
  _internal_mutable_labels()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:Metadata.labels)
}
inline void Metadata::set_labels(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_labels()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Metadata.labels)
}
inline void Metadata::set_labels(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_labels()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Metadata.labels)
}
inline void Metadata::set_labels(int index, absl::string_view value) {
  _internal_mutable_labels()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:Metadata.labels)
}
inline void Metadata::add_labels(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_labels()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:Metadata.labels)
}
inline void Metadata::add_labels(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_labels()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:Metadata.labels)
}
inline void Metadata::add_labels(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_labels()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Metadata.labels)
}
inline void Metadata::add_labels(const char* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_labels()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Metadata.labels)
}
inline void Metadata::add_labels(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_labels()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:Metadata.labels)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
Metadata::labels() const {
  // @@protoc_insertion_point(field_list:Metadata.labels)
  return _internal_labels();
}
inline ::google::protobuf::RepeatedPtrField<std::string>* Metadata::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_list:Metadata.labels)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_labels();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
Metadata::_internal_labels() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.labels_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
Metadata::_internal_mutable_labels() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.labels_;
}

// -------------------------------------------------------------------

// CloneOptions

// int32 depth = 1 [json_name = "depth"];
inline void CloneOptions::clear_depth() {
  _impl_.depth_ = 0;
}
inline ::int32_t CloneOptions::depth() const {
  // @@protoc_insertion_point(field_get:CloneOptions.depth)
  return _internal_depth();
}
inline void CloneOptions::set_depth(::int32_t value) {
  _internal_set_depth(value);
  // @@protoc_insertion_point(field_set:CloneOptions.depth)
}
inline ::int32_t CloneOptions::_internal_depth() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.depth_;
}
inline void CloneOptions::_internal_set_depth(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.depth_ = value;
}

// string username = 2 [json_name = "username"];
inline void CloneOptions::clear_username() {
  _impl_.username_.ClearToEmpty();
}
inline const std::string& CloneOptions::username() const {
  // @@protoc_insertion_point(field_get:CloneOptions.username)
  return _internal_username();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CloneOptions::set_username(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.username_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CloneOptions.username)
}
inline std::string* CloneOptions::mutable_username() {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:CloneOptions.username)
  return _s;
}
inline const std::string& CloneOptions::_internal_username() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.username_.Get();
}
inline void CloneOptions::_internal_set_username(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.username_.Set(value, GetArenaForAllocation());
}
inline std::string* CloneOptions::_internal_mutable_username() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.username_.Mutable( GetArenaForAllocation());
}
inline std::string* CloneOptions::release_username() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:CloneOptions.username)
  return _impl_.username_.Release();
}
inline void CloneOptions::set_allocated_username(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.username_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.username_.IsDefault()) {
          _impl_.username_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CloneOptions.username)
}

// string password_env = 3 [json_name = "password_env"];
inline void CloneOptions::clear_password_env() {
  _impl_.password_env_.ClearToEmpty();
}
inline const std::string& CloneOptions::password_env() const {
  // @@protoc_insertion_point(field_get:CloneOptions.password_env)
  return _internal_password_env();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CloneOptions::set_password_env(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.password_env_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CloneOptions.password_env)
}
inline std::string* CloneOptions::mutable_password_env() {
  std::string* _s = _internal_mutable_password_env();
  // @@protoc_insertion_point(field_mutable:CloneOptions.password_env)
  return _s;
}
inline const std::string& CloneOptions::_internal_password_env() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.password_env_.Get();
}
inline void CloneOptions::_internal_set_password_env(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.password_env_.Set(value, GetArenaForAllocation());
}
inline std::string* CloneOptions::_internal_mutable_password_env() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.password_env_.Mutable( GetArenaForAllocation());
}
inline std::string* CloneOptions::release_password_env() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:CloneOptions.password_env)
  return _impl_.password_env_.Release();
}
inline void CloneOptions::set_allocated_password_env(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.password_env_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.password_env_.IsDefault()) {
          _impl_.password_env_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CloneOptions.password_env)
}

// -------------------------------------------------------------------

// PathSpec

// string path = 1 [json_name = "path"];
inline void PathSpec::clear_path() {
  _impl_.path_.ClearToEmpty();
}
inline const std::string& PathSpec::path() const {
  // @@protoc_insertion_point(field_get:PathSpec.path)
  return _internal_path();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PathSpec::set_path(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.path_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PathSpec.path)
}
inline std::string* PathSpec::mutable_path() {
  std::string* _s = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:PathSpec.path)
  return _s;
}
inline const std::string& PathSpec::_internal_path() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.path_.Get();
}
inline void PathSpec::_internal_set_path(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.path_.Set(value, GetArenaForAllocation());
}
inline std::string* PathSpec::_internal_mutable_path() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.path_.Mutable( GetArenaForAllocation());
}
inline std::string* PathSpec::release_path() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:PathSpec.path)
  return _impl_.path_.Release();
}
inline void PathSpec::set_allocated_path(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.path_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.path_.IsDefault()) {
          _impl_.path_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PathSpec.path)
}

// string name = 2 [json_name = "name"];
inline void PathSpec::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& PathSpec::name() const {
  // @@protoc_insertion_point(field_get:PathSpec.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PathSpec::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PathSpec.name)
}
inline std::string* PathSpec::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:PathSpec.name)
  return _s;
}
inline const std::string& PathSpec::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void PathSpec::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* PathSpec::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* PathSpec::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:PathSpec.name)
  return _impl_.name_.Release();
}
inline void PathSpec::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PathSpec.name)
}

// string ordered_contents = 3 [json_name = "ordered_contents"];
inline void PathSpec::clear_ordered_contents() {
  _impl_.ordered_contents_.ClearToEmpty();
}
inline const std::string& PathSpec::ordered_contents() const {
  // @@protoc_insertion_point(field_get:PathSpec.ordered_contents)
  return _internal_ordered_contents();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PathSpec::set_ordered_contents(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.ordered_contents_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PathSpec.ordered_contents)
}
inline std::string* PathSpec::mutable_ordered_contents() {
  std::string* _s = _internal_mutable_ordered_contents();
  // @@protoc_insertion_point(field_mutable:PathSpec.ordered_contents)
  return _s;
}
inline const std::string& PathSpec::_internal_ordered_contents() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.ordered_contents_.Get();
}
inline void PathSpec::_internal_set_ordered_contents(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.ordered_contents_.Set(value, GetArenaForAllocation());
}
inline std::string* PathSpec::_internal_mutable_ordered_contents() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.ordered_contents_.Mutable( GetArenaForAllocation());
}
inline std::string* PathSpec::release_ordered_contents() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:PathSpec.ordered_contents)
  return _impl_.ordered_contents_.Release();
}
inline void PathSpec::set_allocated_ordered_contents(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ordered_contents_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.ordered_contents_.IsDefault()) {
          _impl_.ordered_contents_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PathSpec.ordered_contents)
}

// .Metadata metadata = 4 [json_name = "metadata"];
inline bool PathSpec::has_metadata() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.metadata_ != nullptr);
  return value;
}
inline void PathSpec::clear_metadata() {
  if (_impl_.metadata_ != nullptr) _impl_.metadata_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::Metadata& PathSpec::_internal_metadata() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::Metadata* p = _impl_.metadata_;
  return p != nullptr ? *p : reinterpret_cast<const ::Metadata&>(::_Metadata_default_instance_);
}
inline const ::Metadata& PathSpec::metadata() const {
  // @@protoc_insertion_point(field_get:PathSpec.metadata)
  return _internal_metadata();
}
inline void PathSpec::unsafe_arena_set_allocated_metadata(::Metadata* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.metadata_);
  }
  _impl_.metadata_ = reinterpret_cast<::Metadata*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PathSpec.metadata)
}
inline ::Metadata* PathSpec::release_metadata() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Metadata* released = _impl_.metadata_;
  _impl_.metadata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::Metadata* PathSpec::unsafe_arena_release_metadata() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:PathSpec.metadata)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Metadata* temp = _impl_.metadata_;
  _impl_.metadata_ = nullptr;
  return temp;
}
inline ::Metadata* PathSpec::_internal_mutable_metadata() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::Metadata>(GetArenaForAllocation());
    _impl_.metadata_ = reinterpret_cast<::Metadata*>(p);
  }
  return _impl_.metadata_;
}
inline ::Metadata* PathSpec::mutable_metadata() {
  ::Metadata* _msg = _internal_mutable_metadata();
  // @@protoc_insertion_point(field_mutable:PathSpec.metadata)
  return _msg;
}
inline void PathSpec::set_allocated_metadata(::Metadata* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::Metadata*>(_impl_.metadata_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::Metadata*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.metadata_ = reinterpret_cast<::Metadata*>(value);
  // @@protoc_insertion_point(field_set_allocated:PathSpec.metadata)
}

// bool ignore_symlinks = 5 [json_name = "ignore_symlinks"];
inline void PathSpec::clear_ignore_symlinks() {
  _impl_.ignore_symlinks_ = false;
}
inline bool PathSpec::ignore_symlinks() const {
  // @@protoc_insertion_point(field_get:PathSpec.ignore_symlinks)
  return _internal_ignore_symlinks();
}
inline void PathSpec::set_ignore_symlinks(bool value) {
  _internal_set_ignore_symlinks(value);
  // @@protoc_insertion_point(field_set:PathSpec.ignore_symlinks)
}
inline bool PathSpec::_internal_ignore_symlinks() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.ignore_symlinks_;
}
inline void PathSpec::_internal_set_ignore_symlinks(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.ignore_symlinks_ = value;
}

// -------------------------------------------------------------------

// RepoSpec

// string path = 1 [json_name = "path"];
inline void RepoSpec::clear_path() {
  _impl_.path_.ClearToEmpty();
}
inline const std::string& RepoSpec::path() const {
  // @@protoc_insertion_point(field_get:RepoSpec.path)
  return _internal_path();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RepoSpec::set_path(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.path_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:RepoSpec.path)
}
inline std::string* RepoSpec::mutable_path() {
  std::string* _s = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:RepoSpec.path)
  return _s;
}
inline const std::string& RepoSpec::_internal_path() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.path_.Get();
}
inline void RepoSpec::_internal_set_path(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.path_.Set(value, GetArenaForAllocation());
}
inline std::string* RepoSpec::_internal_mutable_path() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.path_.Mutable( GetArenaForAllocation());
}
inline std::string* RepoSpec::release_path() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:RepoSpec.path)
  return _impl_.path_.Release();
}
inline void RepoSpec::set_allocated_path(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.path_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.path_.IsDefault()) {
          _impl_.path_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:RepoSpec.path)
}

// string name = 2 [json_name = "name"];
inline void RepoSpec::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& RepoSpec::name() const {
  // @@protoc_insertion_point(field_get:RepoSpec.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RepoSpec::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:RepoSpec.name)
}
inline std::string* RepoSpec::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:RepoSpec.name)
  return _s;
}
inline const std::string& RepoSpec::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void RepoSpec::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* RepoSpec::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* RepoSpec::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:RepoSpec.name)
  return _impl_.name_.Release();
}
inline void RepoSpec::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:RepoSpec.name)
}

// repeated string revisions = 3 [json_name = "revisions"];
inline int RepoSpec::_internal_revisions_size() const {
  return _internal_revisions().size();
}
inline int RepoSpec::revisions_size() const {
  return _internal_revisions_size();
}
inline void RepoSpec::clear_revisions() {
  _internal_mutable_revisions()->Clear();
}
inline std::string* RepoSpec::add_revisions() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_revisions()->Add();
  // @@protoc_insertion_point(field_add_mutable:RepoSpec.revisions)
  return _s;
}
inline const std::string& RepoSpec::revisions(int index) const {
  // @@protoc_insertion_point(field_get:RepoSpec.revisions)
  return _internal_revisions().Get(index);
}
inline std::string* RepoSpec::mutable_revisions(int index) {
  // @@protoc_insertion_point(field_mutable:RepoSpec.revisions)
  return _internal_mutable_revisions()->Mutable(index);
}
inline void RepoSpec::set_revisions(int index, const std::string& value) {
  _internal_mutable_revisions()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:RepoSpec.revisions)
}
inline void RepoSpec::set_revisions(int index, std::string&& value) {
  _internal_mutable_revisions()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:RepoSpec.revisions)
}
inline void RepoSpec::set_revisions(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_revisions()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:RepoSpec.revisions)
}
inline void RepoSpec::set_revisions(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_revisions()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:RepoSpec.revisions)
}
inline void RepoSpec::set_revisions(int index, absl::string_view value) {
  _internal_mutable_revisions()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:RepoSpec.revisions)
}
inline void RepoSpec::add_revisions(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_revisions()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:RepoSpec.revisions)
}
inline void RepoSpec::add_revisions(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_revisions()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:RepoSpec.revisions)
}
inline void RepoSpec::add_revisions(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_revisions()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:RepoSpec.revisions)
}
inline void RepoSpec::add_revisions(const char* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_revisions()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:RepoSpec.revisions)
}
inline void RepoSpec::add_revisions(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_revisions()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:RepoSpec.revisions)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
RepoSpec::revisions() const {
  // @@protoc_insertion_point(field_list:RepoSpec.revisions)
  return _internal_revisions();
}
inline ::google::protobuf::RepeatedPtrField<std::string>* RepoSpec::mutable_revisions() {
  // @@protoc_insertion_point(field_mutable_list:RepoSpec.revisions)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_revisions();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
RepoSpec::_internal_revisions() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.revisions_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
RepoSpec::_internal_mutable_revisions() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.revisions_;
}

// .Metadata metadata = 4 [json_name = "metadata"];
inline bool RepoSpec::has_metadata() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.metadata_ != nullptr);
  return value;
}
inline void RepoSpec::clear_metadata() {
  if (_impl_.metadata_ != nullptr) _impl_.metadata_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::Metadata& RepoSpec::_internal_metadata() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::Metadata* p = _impl_.metadata_;
  return p != nullptr ? *p : reinterpret_cast<const ::Metadata&>(::_Metadata_default_instance_);
}
inline const ::Metadata& RepoSpec::metadata() const {
  // @@protoc_insertion_point(field_get:RepoSpec.metadata)
  return _internal_metadata();
}
inline void RepoSpec::unsafe_arena_set_allocated_metadata(::Metadata* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.metadata_);
  }
  _impl_.metadata_ = reinterpret_cast<::Metadata*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RepoSpec.metadata)
}
inline ::Metadata* RepoSpec::release_metadata() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Metadata* released = _impl_.metadata_;
  _impl_.metadata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::Metadata* RepoSpec::unsafe_arena_release_metadata() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:RepoSpec.metadata)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Metadata* temp = _impl_.metadata_;
  _impl_.metadata_ = nullptr;
  return temp;
}
inline ::Metadata* RepoSpec::_internal_mutable_metadata() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::Metadata>(GetArenaForAllocation());
    _impl_.metadata_ = reinterpret_cast<::Metadata*>(p);
  }
  return _impl_.metadata_;
}
inline ::Metadata* RepoSpec::mutable_metadata() {
  ::Metadata* _msg = _internal_mutable_metadata();
  // @@protoc_insertion_point(field_mutable:RepoSpec.metadata)
  return _msg;
}
inline void RepoSpec::set_allocated_metadata(::Metadata* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::Metadata*>(_impl_.metadata_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::Metadata*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.metadata_ = reinterpret_cast<::Metadata*>(value);
  // @@protoc_insertion_point(field_set_allocated:RepoSpec.metadata)
}

// bool walk_submodules = 5 [json_name = "walk_submodules"];
inline void RepoSpec::clear_walk_submodules() {
  _impl_.walk_submodules_ = false;
}
inline bool RepoSpec::walk_submodules() const {
  // @@protoc_insertion_point(field_get:RepoSpec.walk_submodules)
  return _internal_walk_submodules();
}
inline void RepoSpec::set_walk_submodules(bool value) {
  _internal_set_walk_submodules(value);
  // @@protoc_insertion_point(field_set:RepoSpec.walk_submodules)
}
inline bool RepoSpec::_internal_walk_submodules() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.walk_submodules_;
}
inline void RepoSpec::_internal_set_walk_submodules(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.walk_submodules_ = value;
}

// .CloneOptions clone_options = 6 [json_name = "clone_options"];
inline bool RepoSpec::has_clone_options() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.clone_options_ != nullptr);
  return value;
}
inline void RepoSpec::clear_clone_options() {
  if (_impl_.clone_options_ != nullptr) _impl_.clone_options_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::CloneOptions& RepoSpec::_internal_clone_options() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::CloneOptions* p = _impl_.clone_options_;
  return p != nullptr ? *p : reinterpret_cast<const ::CloneOptions&>(::_CloneOptions_default_instance_);
}
inline const ::CloneOptions& RepoSpec::clone_options() const {
  // @@protoc_insertion_point(field_get:RepoSpec.clone_options)
  return _internal_clone_options();
}
inline void RepoSpec::unsafe_arena_set_allocated_clone_options(::CloneOptions* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.clone_options_);
  }
  _impl_.clone_options_ = reinterpret_cast<::CloneOptions*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RepoSpec.clone_options)
}
inline ::CloneOptions* RepoSpec::release_clone_options() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::CloneOptions* released = _impl_.clone_options_;
  _impl_.clone_options_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::CloneOptions* RepoSpec::unsafe_arena_release_clone_options() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:RepoSpec.clone_options)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::CloneOptions* temp = _impl_.clone_options_;
  _impl_.clone_options_ = nullptr;
  return temp;
}
inline ::CloneOptions* RepoSpec::_internal_mutable_clone_options() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.clone_options_ == nullptr) {
    auto* p = CreateMaybeMessage<::CloneOptions>(GetArenaForAllocation());
    _impl_.clone_options_ = reinterpret_cast<::CloneOptions*>(p);
  }
  return _impl_.clone_options_;
}
inline ::CloneOptions* RepoSpec::mutable_clone_options() {
  ::CloneOptions* _msg = _internal_mutable_clone_options();
  // @@protoc_insertion_point(field_mutable:RepoSpec.clone_options)
  return _msg;
}
inline void RepoSpec::set_allocated_clone_options(::CloneOptions* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::CloneOptions*>(_impl_.clone_options_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::CloneOptions*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.clone_options_ = reinterpret_cast<::CloneOptions*>(value);
  // @@protoc_insertion_point(field_set_allocated:RepoSpec.clone_options)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_config_2eproto_2epb_2eh
