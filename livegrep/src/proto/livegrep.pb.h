// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: livegrep.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_livegrep_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_livegrep_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4024000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4024004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "config.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_livegrep_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_livegrep_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_livegrep_2eproto;
class Bounds;
struct BoundsDefaultTypeInternal;
extern BoundsDefaultTypeInternal _Bounds_default_instance_;
class CodeSearchResult;
struct CodeSearchResultDefaultTypeInternal;
extern CodeSearchResultDefaultTypeInternal _CodeSearchResult_default_instance_;
class Empty;
struct EmptyDefaultTypeInternal;
extern EmptyDefaultTypeInternal _Empty_default_instance_;
class FileResult;
struct FileResultDefaultTypeInternal;
extern FileResultDefaultTypeInternal _FileResult_default_instance_;
class InfoRequest;
struct InfoRequestDefaultTypeInternal;
extern InfoRequestDefaultTypeInternal _InfoRequest_default_instance_;
class Query;
struct QueryDefaultTypeInternal;
extern QueryDefaultTypeInternal _Query_default_instance_;
class SearchResult;
struct SearchResultDefaultTypeInternal;
extern SearchResultDefaultTypeInternal _SearchResult_default_instance_;
class SearchStats;
struct SearchStatsDefaultTypeInternal;
extern SearchStatsDefaultTypeInternal _SearchStats_default_instance_;
class ServerInfo;
struct ServerInfoDefaultTypeInternal;
extern ServerInfoDefaultTypeInternal _ServerInfo_default_instance_;
class ServerInfo_Tree;
struct ServerInfo_TreeDefaultTypeInternal;
extern ServerInfo_TreeDefaultTypeInternal _ServerInfo_Tree_default_instance_;
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

enum SearchStats_ExitReason : int {
  SearchStats_ExitReason_NONE = 0,
  SearchStats_ExitReason_TIMEOUT = 1,
  SearchStats_ExitReason_MATCH_LIMIT = 2,
  SearchStats_ExitReason_SearchStats_ExitReason_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  SearchStats_ExitReason_SearchStats_ExitReason_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool SearchStats_ExitReason_IsValid(int value);
constexpr SearchStats_ExitReason SearchStats_ExitReason_ExitReason_MIN = static_cast<SearchStats_ExitReason>(0);
constexpr SearchStats_ExitReason SearchStats_ExitReason_ExitReason_MAX = static_cast<SearchStats_ExitReason>(2);
constexpr int SearchStats_ExitReason_ExitReason_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
SearchStats_ExitReason_descriptor();
template <typename T>
const std::string& SearchStats_ExitReason_Name(T value) {
  static_assert(std::is_same<T, SearchStats_ExitReason>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to ExitReason_Name().");
  return SearchStats_ExitReason_Name(static_cast<SearchStats_ExitReason>(value));
}
template <>
inline const std::string& SearchStats_ExitReason_Name(SearchStats_ExitReason value) {
  return ::google::protobuf::internal::NameOfDenseEnum<SearchStats_ExitReason_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool SearchStats_ExitReason_Parse(absl::string_view name, SearchStats_ExitReason* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SearchStats_ExitReason>(
      SearchStats_ExitReason_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class Query final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Query) */ {
 public:
  inline Query() : Query(nullptr) {}
  ~Query() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Query(::google::protobuf::internal::ConstantInitialized);

  Query(const Query& from);
  Query(Query&& from) noexcept
    : Query() {
    *this = ::std::move(from);
  }

  inline Query& operator=(const Query& from) {
    CopyFrom(from);
    return *this;
  }
  inline Query& operator=(Query&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Query& default_instance() {
    return *internal_default_instance();
  }
  static inline const Query* internal_default_instance() {
    return reinterpret_cast<const Query*>(
               &_Query_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Query& a, Query& b) {
    a.Swap(&b);
  }
  inline void Swap(Query* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Query* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Query* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Query>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Query& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Query& from) {
    Query::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Query* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Query";
  }
  protected:
  explicit Query(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileFieldNumber = 2,
    kNotFileFieldNumber = 6,
    kLineFieldNumber = 1,
    kRepoFieldNumber = 3,
    kTagsFieldNumber = 4,
    kNotRepoFieldNumber = 7,
    kNotTagsFieldNumber = 8,
    kFoldCaseFieldNumber = 5,
    kFilenameOnlyFieldNumber = 10,
    kMaxMatchesFieldNumber = 9,
    kContextLinesFieldNumber = 11,
  };
  // repeated string file = 2;
  int file_size() const;
  private:
  int _internal_file_size() const;

  public:
  void clear_file() ;
  const std::string& file(int index) const;
  std::string* mutable_file(int index);
  void set_file(int index, const std::string& value);
  void set_file(int index, std::string&& value);
  void set_file(int index, const char* value);
  void set_file(int index, const char* value, std::size_t size);
  void set_file(int index, absl::string_view value);
  std::string* add_file();
  void add_file(const std::string& value);
  void add_file(std::string&& value);
  void add_file(const char* value);
  void add_file(const char* value, std::size_t size);
  void add_file(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& file() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_file();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_file() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_file();

  public:
  // repeated string not_file = 6;
  int not_file_size() const;
  private:
  int _internal_not_file_size() const;

  public:
  void clear_not_file() ;
  const std::string& not_file(int index) const;
  std::string* mutable_not_file(int index);
  void set_not_file(int index, const std::string& value);
  void set_not_file(int index, std::string&& value);
  void set_not_file(int index, const char* value);
  void set_not_file(int index, const char* value, std::size_t size);
  void set_not_file(int index, absl::string_view value);
  std::string* add_not_file();
  void add_not_file(const std::string& value);
  void add_not_file(std::string&& value);
  void add_not_file(const char* value);
  void add_not_file(const char* value, std::size_t size);
  void add_not_file(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& not_file() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_not_file();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_not_file() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_not_file();

  public:
  // string line = 1;
  void clear_line() ;
  const std::string& line() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_line(Arg_&& arg, Args_... args);
  std::string* mutable_line();
  PROTOBUF_NODISCARD std::string* release_line();
  void set_allocated_line(std::string* ptr);

  private:
  const std::string& _internal_line() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_line(
      const std::string& value);
  std::string* _internal_mutable_line();

  public:
  // string repo = 3;
  void clear_repo() ;
  const std::string& repo() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_repo(Arg_&& arg, Args_... args);
  std::string* mutable_repo();
  PROTOBUF_NODISCARD std::string* release_repo();
  void set_allocated_repo(std::string* ptr);

  private:
  const std::string& _internal_repo() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_repo(
      const std::string& value);
  std::string* _internal_mutable_repo();

  public:
  // string tags = 4;
  void clear_tags() ;
  const std::string& tags() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_tags(Arg_&& arg, Args_... args);
  std::string* mutable_tags();
  PROTOBUF_NODISCARD std::string* release_tags();
  void set_allocated_tags(std::string* ptr);

  private:
  const std::string& _internal_tags() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tags(
      const std::string& value);
  std::string* _internal_mutable_tags();

  public:
  // string not_repo = 7;
  void clear_not_repo() ;
  const std::string& not_repo() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_not_repo(Arg_&& arg, Args_... args);
  std::string* mutable_not_repo();
  PROTOBUF_NODISCARD std::string* release_not_repo();
  void set_allocated_not_repo(std::string* ptr);

  private:
  const std::string& _internal_not_repo() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_not_repo(
      const std::string& value);
  std::string* _internal_mutable_not_repo();

  public:
  // string not_tags = 8;
  void clear_not_tags() ;
  const std::string& not_tags() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_not_tags(Arg_&& arg, Args_... args);
  std::string* mutable_not_tags();
  PROTOBUF_NODISCARD std::string* release_not_tags();
  void set_allocated_not_tags(std::string* ptr);

  private:
  const std::string& _internal_not_tags() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_not_tags(
      const std::string& value);
  std::string* _internal_mutable_not_tags();

  public:
  // bool fold_case = 5;
  void clear_fold_case() ;
  bool fold_case() const;
  void set_fold_case(bool value);

  private:
  bool _internal_fold_case() const;
  void _internal_set_fold_case(bool value);

  public:
  // bool filename_only = 10;
  void clear_filename_only() ;
  bool filename_only() const;
  void set_filename_only(bool value);

  private:
  bool _internal_filename_only() const;
  void _internal_set_filename_only(bool value);

  public:
  // int32 max_matches = 9;
  void clear_max_matches() ;
  ::int32_t max_matches() const;
  void set_max_matches(::int32_t value);

  private:
  ::int32_t _internal_max_matches() const;
  void _internal_set_max_matches(::int32_t value);

  public:
  // int32 context_lines = 11;
  void clear_context_lines() ;
  ::int32_t context_lines() const;
  void set_context_lines(::int32_t value);

  private:
  ::int32_t _internal_context_lines() const;
  void _internal_set_context_lines(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:Query)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<4, 11, 0, 62, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedPtrField<std::string> file_;
    ::google::protobuf::RepeatedPtrField<std::string> not_file_;
    ::google::protobuf::internal::ArenaStringPtr line_;
    ::google::protobuf::internal::ArenaStringPtr repo_;
    ::google::protobuf::internal::ArenaStringPtr tags_;
    ::google::protobuf::internal::ArenaStringPtr not_repo_;
    ::google::protobuf::internal::ArenaStringPtr not_tags_;
    bool fold_case_;
    bool filename_only_;
    ::int32_t max_matches_;
    ::int32_t context_lines_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_livegrep_2eproto;
};// -------------------------------------------------------------------

class Bounds final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Bounds) */ {
 public:
  inline Bounds() : Bounds(nullptr) {}
  ~Bounds() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Bounds(::google::protobuf::internal::ConstantInitialized);

  Bounds(const Bounds& from);
  Bounds(Bounds&& from) noexcept
    : Bounds() {
    *this = ::std::move(from);
  }

  inline Bounds& operator=(const Bounds& from) {
    CopyFrom(from);
    return *this;
  }
  inline Bounds& operator=(Bounds&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Bounds& default_instance() {
    return *internal_default_instance();
  }
  static inline const Bounds* internal_default_instance() {
    return reinterpret_cast<const Bounds*>(
               &_Bounds_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Bounds& a, Bounds& b) {
    a.Swap(&b);
  }
  inline void Swap(Bounds* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Bounds* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Bounds* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Bounds>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Bounds& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Bounds& from) {
    Bounds::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Bounds* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Bounds";
  }
  protected:
  explicit Bounds(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLeftFieldNumber = 1,
    kRightFieldNumber = 2,
  };
  // int32 left = 1;
  void clear_left() ;
  ::int32_t left() const;
  void set_left(::int32_t value);

  private:
  ::int32_t _internal_left() const;
  void _internal_set_left(::int32_t value);

  public:
  // int32 right = 2;
  void clear_right() ;
  ::int32_t right() const;
  void set_right(::int32_t value);

  private:
  ::int32_t _internal_right() const;
  void _internal_set_right(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:Bounds)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::int32_t left_;
    ::int32_t right_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_livegrep_2eproto;
};// -------------------------------------------------------------------

class SearchResult final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SearchResult) */ {
 public:
  inline SearchResult() : SearchResult(nullptr) {}
  ~SearchResult() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SearchResult(::google::protobuf::internal::ConstantInitialized);

  SearchResult(const SearchResult& from);
  SearchResult(SearchResult&& from) noexcept
    : SearchResult() {
    *this = ::std::move(from);
  }

  inline SearchResult& operator=(const SearchResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline SearchResult& operator=(SearchResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SearchResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const SearchResult* internal_default_instance() {
    return reinterpret_cast<const SearchResult*>(
               &_SearchResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SearchResult& a, SearchResult& b) {
    a.Swap(&b);
  }
  inline void Swap(SearchResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SearchResult* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SearchResult* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SearchResult>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SearchResult& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const SearchResult& from) {
    SearchResult::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchResult* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "SearchResult";
  }
  protected:
  explicit SearchResult(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContextBeforeFieldNumber = 5,
    kContextAfterFieldNumber = 6,
    kTreeFieldNumber = 1,
    kVersionFieldNumber = 2,
    kPathFieldNumber = 3,
    kLineFieldNumber = 8,
    kBoundsFieldNumber = 7,
    kLineNumberFieldNumber = 4,
  };
  // repeated string context_before = 5;
  int context_before_size() const;
  private:
  int _internal_context_before_size() const;

  public:
  void clear_context_before() ;
  const std::string& context_before(int index) const;
  std::string* mutable_context_before(int index);
  void set_context_before(int index, const std::string& value);
  void set_context_before(int index, std::string&& value);
  void set_context_before(int index, const char* value);
  void set_context_before(int index, const char* value, std::size_t size);
  void set_context_before(int index, absl::string_view value);
  std::string* add_context_before();
  void add_context_before(const std::string& value);
  void add_context_before(std::string&& value);
  void add_context_before(const char* value);
  void add_context_before(const char* value, std::size_t size);
  void add_context_before(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& context_before() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_context_before();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_context_before() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_context_before();

  public:
  // repeated string context_after = 6;
  int context_after_size() const;
  private:
  int _internal_context_after_size() const;

  public:
  void clear_context_after() ;
  const std::string& context_after(int index) const;
  std::string* mutable_context_after(int index);
  void set_context_after(int index, const std::string& value);
  void set_context_after(int index, std::string&& value);
  void set_context_after(int index, const char* value);
  void set_context_after(int index, const char* value, std::size_t size);
  void set_context_after(int index, absl::string_view value);
  std::string* add_context_after();
  void add_context_after(const std::string& value);
  void add_context_after(std::string&& value);
  void add_context_after(const char* value);
  void add_context_after(const char* value, std::size_t size);
  void add_context_after(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& context_after() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_context_after();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_context_after() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_context_after();

  public:
  // string tree = 1;
  void clear_tree() ;
  const std::string& tree() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_tree(Arg_&& arg, Args_... args);
  std::string* mutable_tree();
  PROTOBUF_NODISCARD std::string* release_tree();
  void set_allocated_tree(std::string* ptr);

  private:
  const std::string& _internal_tree() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tree(
      const std::string& value);
  std::string* _internal_mutable_tree();

  public:
  // string version = 2;
  void clear_version() ;
  const std::string& version() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_version(Arg_&& arg, Args_... args);
  std::string* mutable_version();
  PROTOBUF_NODISCARD std::string* release_version();
  void set_allocated_version(std::string* ptr);

  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(
      const std::string& value);
  std::string* _internal_mutable_version();

  public:
  // string path = 3;
  void clear_path() ;
  const std::string& path() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_path(Arg_&& arg, Args_... args);
  std::string* mutable_path();
  PROTOBUF_NODISCARD std::string* release_path();
  void set_allocated_path(std::string* ptr);

  private:
  const std::string& _internal_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path(
      const std::string& value);
  std::string* _internal_mutable_path();

  public:
  // string line = 8;
  void clear_line() ;
  const std::string& line() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_line(Arg_&& arg, Args_... args);
  std::string* mutable_line();
  PROTOBUF_NODISCARD std::string* release_line();
  void set_allocated_line(std::string* ptr);

  private:
  const std::string& _internal_line() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_line(
      const std::string& value);
  std::string* _internal_mutable_line();

  public:
  // .Bounds bounds = 7;
  bool has_bounds() const;
  void clear_bounds() ;
  const ::Bounds& bounds() const;
  PROTOBUF_NODISCARD ::Bounds* release_bounds();
  ::Bounds* mutable_bounds();
  void set_allocated_bounds(::Bounds* value);
  void unsafe_arena_set_allocated_bounds(::Bounds* value);
  ::Bounds* unsafe_arena_release_bounds();

  private:
  const ::Bounds& _internal_bounds() const;
  ::Bounds* _internal_mutable_bounds();

  public:
  // int64 line_number = 4;
  void clear_line_number() ;
  ::int64_t line_number() const;
  void set_line_number(::int64_t value);

  private:
  ::int64_t _internal_line_number() const;
  void _internal_set_line_number(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:SearchResult)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 8, 1, 75, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField<std::string> context_before_;
    ::google::protobuf::RepeatedPtrField<std::string> context_after_;
    ::google::protobuf::internal::ArenaStringPtr tree_;
    ::google::protobuf::internal::ArenaStringPtr version_;
    ::google::protobuf::internal::ArenaStringPtr path_;
    ::google::protobuf::internal::ArenaStringPtr line_;
    ::Bounds* bounds_;
    ::int64_t line_number_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_livegrep_2eproto;
};// -------------------------------------------------------------------

class FileResult final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FileResult) */ {
 public:
  inline FileResult() : FileResult(nullptr) {}
  ~FileResult() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR FileResult(::google::protobuf::internal::ConstantInitialized);

  FileResult(const FileResult& from);
  FileResult(FileResult&& from) noexcept
    : FileResult() {
    *this = ::std::move(from);
  }

  inline FileResult& operator=(const FileResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileResult& operator=(FileResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FileResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const FileResult* internal_default_instance() {
    return reinterpret_cast<const FileResult*>(
               &_FileResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(FileResult& a, FileResult& b) {
    a.Swap(&b);
  }
  inline void Swap(FileResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileResult* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FileResult* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FileResult>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const FileResult& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const FileResult& from) {
    FileResult::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileResult* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "FileResult";
  }
  protected:
  explicit FileResult(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTreeFieldNumber = 1,
    kVersionFieldNumber = 2,
    kPathFieldNumber = 3,
    kBoundsFieldNumber = 4,
  };
  // string tree = 1;
  void clear_tree() ;
  const std::string& tree() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_tree(Arg_&& arg, Args_... args);
  std::string* mutable_tree();
  PROTOBUF_NODISCARD std::string* release_tree();
  void set_allocated_tree(std::string* ptr);

  private:
  const std::string& _internal_tree() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tree(
      const std::string& value);
  std::string* _internal_mutable_tree();

  public:
  // string version = 2;
  void clear_version() ;
  const std::string& version() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_version(Arg_&& arg, Args_... args);
  std::string* mutable_version();
  PROTOBUF_NODISCARD std::string* release_version();
  void set_allocated_version(std::string* ptr);

  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(
      const std::string& value);
  std::string* _internal_mutable_version();

  public:
  // string path = 3;
  void clear_path() ;
  const std::string& path() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_path(Arg_&& arg, Args_... args);
  std::string* mutable_path();
  PROTOBUF_NODISCARD std::string* release_path();
  void set_allocated_path(std::string* ptr);

  private:
  const std::string& _internal_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path(
      const std::string& value);
  std::string* _internal_mutable_path();

  public:
  // .Bounds bounds = 4;
  bool has_bounds() const;
  void clear_bounds() ;
  const ::Bounds& bounds() const;
  PROTOBUF_NODISCARD ::Bounds* release_bounds();
  ::Bounds* mutable_bounds();
  void set_allocated_bounds(::Bounds* value);
  void unsafe_arena_set_allocated_bounds(::Bounds* value);
  ::Bounds* unsafe_arena_release_bounds();

  private:
  const ::Bounds& _internal_bounds() const;
  ::Bounds* _internal_mutable_bounds();

  public:
  // @@protoc_insertion_point(class_scope:FileResult)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 4, 1, 34, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr tree_;
    ::google::protobuf::internal::ArenaStringPtr version_;
    ::google::protobuf::internal::ArenaStringPtr path_;
    ::Bounds* bounds_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_livegrep_2eproto;
};// -------------------------------------------------------------------

class SearchStats final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SearchStats) */ {
 public:
  inline SearchStats() : SearchStats(nullptr) {}
  ~SearchStats() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SearchStats(::google::protobuf::internal::ConstantInitialized);

  SearchStats(const SearchStats& from);
  SearchStats(SearchStats&& from) noexcept
    : SearchStats() {
    *this = ::std::move(from);
  }

  inline SearchStats& operator=(const SearchStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline SearchStats& operator=(SearchStats&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SearchStats& default_instance() {
    return *internal_default_instance();
  }
  static inline const SearchStats* internal_default_instance() {
    return reinterpret_cast<const SearchStats*>(
               &_SearchStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SearchStats& a, SearchStats& b) {
    a.Swap(&b);
  }
  inline void Swap(SearchStats* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SearchStats* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SearchStats* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SearchStats>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SearchStats& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const SearchStats& from) {
    SearchStats::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchStats* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "SearchStats";
  }
  protected:
  explicit SearchStats(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using ExitReason = SearchStats_ExitReason;
  static constexpr ExitReason NONE = SearchStats_ExitReason_NONE;
  static constexpr ExitReason TIMEOUT = SearchStats_ExitReason_TIMEOUT;
  static constexpr ExitReason MATCH_LIMIT = SearchStats_ExitReason_MATCH_LIMIT;
  static inline bool ExitReason_IsValid(int value) {
    return SearchStats_ExitReason_IsValid(value);
  }
  static constexpr ExitReason ExitReason_MIN = SearchStats_ExitReason_ExitReason_MIN;
  static constexpr ExitReason ExitReason_MAX = SearchStats_ExitReason_ExitReason_MAX;
  static constexpr int ExitReason_ARRAYSIZE = SearchStats_ExitReason_ExitReason_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* ExitReason_descriptor() {
    return SearchStats_ExitReason_descriptor();
  }
  template <typename T>
  static inline const std::string& ExitReason_Name(T value) {
    return SearchStats_ExitReason_Name(value);
  }
  static inline bool ExitReason_Parse(absl::string_view name, ExitReason* value) {
    return SearchStats_ExitReason_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kRe2TimeFieldNumber = 1,
    kGitTimeFieldNumber = 2,
    kSortTimeFieldNumber = 3,
    kIndexTimeFieldNumber = 4,
    kAnalyzeTimeFieldNumber = 5,
    kTotalTimeFieldNumber = 7,
    kExitReasonFieldNumber = 6,
  };
  // int64 re2_time = 1;
  void clear_re2_time() ;
  ::int64_t re2_time() const;
  void set_re2_time(::int64_t value);

  private:
  ::int64_t _internal_re2_time() const;
  void _internal_set_re2_time(::int64_t value);

  public:
  // int64 git_time = 2;
  void clear_git_time() ;
  ::int64_t git_time() const;
  void set_git_time(::int64_t value);

  private:
  ::int64_t _internal_git_time() const;
  void _internal_set_git_time(::int64_t value);

  public:
  // int64 sort_time = 3;
  void clear_sort_time() ;
  ::int64_t sort_time() const;
  void set_sort_time(::int64_t value);

  private:
  ::int64_t _internal_sort_time() const;
  void _internal_set_sort_time(::int64_t value);

  public:
  // int64 index_time = 4;
  void clear_index_time() ;
  ::int64_t index_time() const;
  void set_index_time(::int64_t value);

  private:
  ::int64_t _internal_index_time() const;
  void _internal_set_index_time(::int64_t value);

  public:
  // int64 analyze_time = 5;
  void clear_analyze_time() ;
  ::int64_t analyze_time() const;
  void set_analyze_time(::int64_t value);

  private:
  ::int64_t _internal_analyze_time() const;
  void _internal_set_analyze_time(::int64_t value);

  public:
  // int64 total_time = 7;
  void clear_total_time() ;
  ::int64_t total_time() const;
  void set_total_time(::int64_t value);

  private:
  ::int64_t _internal_total_time() const;
  void _internal_set_total_time(::int64_t value);

  public:
  // .SearchStats.ExitReason exit_reason = 6;
  void clear_exit_reason() ;
  ::SearchStats_ExitReason exit_reason() const;
  void set_exit_reason(::SearchStats_ExitReason value);

  private:
  ::SearchStats_ExitReason _internal_exit_reason() const;
  void _internal_set_exit_reason(::SearchStats_ExitReason value);

  public:
  // @@protoc_insertion_point(class_scope:SearchStats)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 7, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::int64_t re2_time_;
    ::int64_t git_time_;
    ::int64_t sort_time_;
    ::int64_t index_time_;
    ::int64_t analyze_time_;
    ::int64_t total_time_;
    int exit_reason_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_livegrep_2eproto;
};// -------------------------------------------------------------------

class ServerInfo_Tree final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServerInfo.Tree) */ {
 public:
  inline ServerInfo_Tree() : ServerInfo_Tree(nullptr) {}
  ~ServerInfo_Tree() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ServerInfo_Tree(::google::protobuf::internal::ConstantInitialized);

  ServerInfo_Tree(const ServerInfo_Tree& from);
  ServerInfo_Tree(ServerInfo_Tree&& from) noexcept
    : ServerInfo_Tree() {
    *this = ::std::move(from);
  }

  inline ServerInfo_Tree& operator=(const ServerInfo_Tree& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerInfo_Tree& operator=(ServerInfo_Tree&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ServerInfo_Tree& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServerInfo_Tree* internal_default_instance() {
    return reinterpret_cast<const ServerInfo_Tree*>(
               &_ServerInfo_Tree_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ServerInfo_Tree& a, ServerInfo_Tree& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerInfo_Tree* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerInfo_Tree* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ServerInfo_Tree* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ServerInfo_Tree>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ServerInfo_Tree& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ServerInfo_Tree& from) {
    ServerInfo_Tree::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerInfo_Tree* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ServerInfo.Tree";
  }
  protected:
  explicit ServerInfo_Tree(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kVersionFieldNumber = 2,
    kMetadataFieldNumber = 3,
  };
  // string name = 1;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string version = 2;
  void clear_version() ;
  const std::string& version() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_version(Arg_&& arg, Args_... args);
  std::string* mutable_version();
  PROTOBUF_NODISCARD std::string* release_version();
  void set_allocated_version(std::string* ptr);

  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(
      const std::string& value);
  std::string* _internal_mutable_version();

  public:
  // .Metadata metadata = 3;
  bool has_metadata() const;
  void clear_metadata() ;
  const ::Metadata& metadata() const;
  PROTOBUF_NODISCARD ::Metadata* release_metadata();
  ::Metadata* mutable_metadata();
  void set_allocated_metadata(::Metadata* value);
  void unsafe_arena_set_allocated_metadata(::Metadata* value);
  ::Metadata* unsafe_arena_release_metadata();

  private:
  const ::Metadata& _internal_metadata() const;
  ::Metadata* _internal_mutable_metadata();

  public:
  // @@protoc_insertion_point(class_scope:ServerInfo.Tree)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 3, 1, 35, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr version_;
    ::Metadata* metadata_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_livegrep_2eproto;
};// -------------------------------------------------------------------

class ServerInfo final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServerInfo) */ {
 public:
  inline ServerInfo() : ServerInfo(nullptr) {}
  ~ServerInfo() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ServerInfo(::google::protobuf::internal::ConstantInitialized);

  ServerInfo(const ServerInfo& from);
  ServerInfo(ServerInfo&& from) noexcept
    : ServerInfo() {
    *this = ::std::move(from);
  }

  inline ServerInfo& operator=(const ServerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerInfo& operator=(ServerInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ServerInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServerInfo* internal_default_instance() {
    return reinterpret_cast<const ServerInfo*>(
               &_ServerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ServerInfo& a, ServerInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ServerInfo* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ServerInfo>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ServerInfo& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ServerInfo& from) {
    ServerInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerInfo* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ServerInfo";
  }
  protected:
  explicit ServerInfo(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ServerInfo_Tree Tree;

  // accessors -------------------------------------------------------

  enum : int {
    kTreesFieldNumber = 2,
    kNameFieldNumber = 1,
    kIndexTimeFieldNumber = 4,
    kHasTagsFieldNumber = 3,
  };
  // repeated .ServerInfo.Tree trees = 2;
  int trees_size() const;
  private:
  int _internal_trees_size() const;

  public:
  void clear_trees() ;
  ::ServerInfo_Tree* mutable_trees(int index);
  ::google::protobuf::RepeatedPtrField< ::ServerInfo_Tree >*
      mutable_trees();
  private:
  const ::google::protobuf::RepeatedPtrField<::ServerInfo_Tree>& _internal_trees() const;
  ::google::protobuf::RepeatedPtrField<::ServerInfo_Tree>* _internal_mutable_trees();
  public:
  const ::ServerInfo_Tree& trees(int index) const;
  ::ServerInfo_Tree* add_trees();
  const ::google::protobuf::RepeatedPtrField< ::ServerInfo_Tree >&
      trees() const;
  // string name = 1;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // int64 index_time = 4;
  void clear_index_time() ;
  ::int64_t index_time() const;
  void set_index_time(::int64_t value);

  private:
  ::int64_t _internal_index_time() const;
  void _internal_set_index_time(::int64_t value);

  public:
  // bool has_tags = 3;
  void clear_has_tags() ;
  bool has_tags() const;
  void set_has_tags(bool value);

  private:
  bool _internal_has_tags() const;
  void _internal_set_has_tags(bool value);

  public:
  // @@protoc_insertion_point(class_scope:ServerInfo)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 4, 1, 23, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedPtrField< ::ServerInfo_Tree > trees_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::int64_t index_time_;
    bool has_tags_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_livegrep_2eproto;
};// -------------------------------------------------------------------

class CodeSearchResult final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CodeSearchResult) */ {
 public:
  inline CodeSearchResult() : CodeSearchResult(nullptr) {}
  ~CodeSearchResult() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CodeSearchResult(::google::protobuf::internal::ConstantInitialized);

  CodeSearchResult(const CodeSearchResult& from);
  CodeSearchResult(CodeSearchResult&& from) noexcept
    : CodeSearchResult() {
    *this = ::std::move(from);
  }

  inline CodeSearchResult& operator=(const CodeSearchResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline CodeSearchResult& operator=(CodeSearchResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CodeSearchResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const CodeSearchResult* internal_default_instance() {
    return reinterpret_cast<const CodeSearchResult*>(
               &_CodeSearchResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CodeSearchResult& a, CodeSearchResult& b) {
    a.Swap(&b);
  }
  inline void Swap(CodeSearchResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CodeSearchResult* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CodeSearchResult* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CodeSearchResult>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CodeSearchResult& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const CodeSearchResult& from) {
    CodeSearchResult::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CodeSearchResult* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "CodeSearchResult";
  }
  protected:
  explicit CodeSearchResult(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultsFieldNumber = 2,
    kFileResultsFieldNumber = 3,
    kIndexNameFieldNumber = 4,
    kStatsFieldNumber = 1,
    kIndexTimeFieldNumber = 5,
  };
  // repeated .SearchResult results = 2;
  int results_size() const;
  private:
  int _internal_results_size() const;

  public:
  void clear_results() ;
  ::SearchResult* mutable_results(int index);
  ::google::protobuf::RepeatedPtrField< ::SearchResult >*
      mutable_results();
  private:
  const ::google::protobuf::RepeatedPtrField<::SearchResult>& _internal_results() const;
  ::google::protobuf::RepeatedPtrField<::SearchResult>* _internal_mutable_results();
  public:
  const ::SearchResult& results(int index) const;
  ::SearchResult* add_results();
  const ::google::protobuf::RepeatedPtrField< ::SearchResult >&
      results() const;
  // repeated .FileResult file_results = 3;
  int file_results_size() const;
  private:
  int _internal_file_results_size() const;

  public:
  void clear_file_results() ;
  ::FileResult* mutable_file_results(int index);
  ::google::protobuf::RepeatedPtrField< ::FileResult >*
      mutable_file_results();
  private:
  const ::google::protobuf::RepeatedPtrField<::FileResult>& _internal_file_results() const;
  ::google::protobuf::RepeatedPtrField<::FileResult>* _internal_mutable_file_results();
  public:
  const ::FileResult& file_results(int index) const;
  ::FileResult* add_file_results();
  const ::google::protobuf::RepeatedPtrField< ::FileResult >&
      file_results() const;
  // string index_name = 4;
  void clear_index_name() ;
  const std::string& index_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_index_name(Arg_&& arg, Args_... args);
  std::string* mutable_index_name();
  PROTOBUF_NODISCARD std::string* release_index_name();
  void set_allocated_index_name(std::string* ptr);

  private:
  const std::string& _internal_index_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_index_name(
      const std::string& value);
  std::string* _internal_mutable_index_name();

  public:
  // .SearchStats stats = 1;
  bool has_stats() const;
  void clear_stats() ;
  const ::SearchStats& stats() const;
  PROTOBUF_NODISCARD ::SearchStats* release_stats();
  ::SearchStats* mutable_stats();
  void set_allocated_stats(::SearchStats* value);
  void unsafe_arena_set_allocated_stats(::SearchStats* value);
  ::SearchStats* unsafe_arena_release_stats();

  private:
  const ::SearchStats& _internal_stats() const;
  ::SearchStats* _internal_mutable_stats();

  public:
  // int64 index_time = 5;
  void clear_index_time() ;
  ::int64_t index_time() const;
  void set_index_time(::int64_t value);

  private:
  ::int64_t _internal_index_time() const;
  void _internal_set_index_time(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:CodeSearchResult)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 5, 3, 35, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::SearchResult > results_;
    ::google::protobuf::RepeatedPtrField< ::FileResult > file_results_;
    ::google::protobuf::internal::ArenaStringPtr index_name_;
    ::SearchStats* stats_;
    ::int64_t index_time_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_livegrep_2eproto;
};// -------------------------------------------------------------------

class InfoRequest final :
    public ::google::protobuf::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:InfoRequest) */ {
 public:
  inline InfoRequest() : InfoRequest(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR InfoRequest(::google::protobuf::internal::ConstantInitialized);

  InfoRequest(const InfoRequest& from);
  InfoRequest(InfoRequest&& from) noexcept
    : InfoRequest() {
    *this = ::std::move(from);
  }

  inline InfoRequest& operator=(const InfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline InfoRequest& operator=(InfoRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InfoRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const InfoRequest* internal_default_instance() {
    return reinterpret_cast<const InfoRequest*>(
               &_InfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(InfoRequest& a, InfoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(InfoRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InfoRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InfoRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InfoRequest>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const InfoRequest& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const InfoRequest& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "InfoRequest";
  }
  protected:
  explicit InfoRequest(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:InfoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_livegrep_2eproto;
};// -------------------------------------------------------------------

class Empty final :
    public ::google::protobuf::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:Empty) */ {
 public:
  inline Empty() : Empty(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Empty(::google::protobuf::internal::ConstantInitialized);

  Empty(const Empty& from);
  Empty(Empty&& from) noexcept
    : Empty() {
    *this = ::std::move(from);
  }

  inline Empty& operator=(const Empty& from) {
    CopyFrom(from);
    return *this;
  }
  inline Empty& operator=(Empty&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Empty& default_instance() {
    return *internal_default_instance();
  }
  static inline const Empty* internal_default_instance() {
    return reinterpret_cast<const Empty*>(
               &_Empty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Empty& a, Empty& b) {
    a.Swap(&b);
  }
  inline void Swap(Empty* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Empty* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Empty* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Empty>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const Empty& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const Empty& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Empty";
  }
  protected:
  explicit Empty(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Empty)
 private:
  class _Internal;

  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_livegrep_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Query

// string line = 1;
inline void Query::clear_line() {
  _impl_.line_.ClearToEmpty();
}
inline const std::string& Query::line() const {
  // @@protoc_insertion_point(field_get:Query.line)
  return _internal_line();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Query::set_line(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.line_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Query.line)
}
inline std::string* Query::mutable_line() {
  std::string* _s = _internal_mutable_line();
  // @@protoc_insertion_point(field_mutable:Query.line)
  return _s;
}
inline const std::string& Query::_internal_line() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.line_.Get();
}
inline void Query::_internal_set_line(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.line_.Set(value, GetArenaForAllocation());
}
inline std::string* Query::_internal_mutable_line() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.line_.Mutable( GetArenaForAllocation());
}
inline std::string* Query::release_line() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Query.line)
  return _impl_.line_.Release();
}
inline void Query::set_allocated_line(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.line_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.line_.IsDefault()) {
          _impl_.line_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Query.line)
}

// repeated string file = 2;
inline int Query::_internal_file_size() const {
  return _internal_file().size();
}
inline int Query::file_size() const {
  return _internal_file_size();
}
inline void Query::clear_file() {
  _internal_mutable_file()->Clear();
}
inline std::string* Query::add_file() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_file()->Add();
  // @@protoc_insertion_point(field_add_mutable:Query.file)
  return _s;
}
inline const std::string& Query::file(int index) const {
  // @@protoc_insertion_point(field_get:Query.file)
  return _internal_file().Get(index);
}
inline std::string* Query::mutable_file(int index) {
  // @@protoc_insertion_point(field_mutable:Query.file)
  return _internal_mutable_file()->Mutable(index);
}
inline void Query::set_file(int index, const std::string& value) {
  _internal_mutable_file()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:Query.file)
}
inline void Query::set_file(int index, std::string&& value) {
  _internal_mutable_file()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:Query.file)
}
inline void Query::set_file(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_file()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Query.file)
}
inline void Query::set_file(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_file()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Query.file)
}
inline void Query::set_file(int index, absl::string_view value) {
  _internal_mutable_file()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:Query.file)
}
inline void Query::add_file(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_file()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:Query.file)
}
inline void Query::add_file(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_file()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:Query.file)
}
inline void Query::add_file(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_file()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Query.file)
}
inline void Query::add_file(const char* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_file()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Query.file)
}
inline void Query::add_file(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_file()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:Query.file)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
Query::file() const {
  // @@protoc_insertion_point(field_list:Query.file)
  return _internal_file();
}
inline ::google::protobuf::RepeatedPtrField<std::string>* Query::mutable_file() {
  // @@protoc_insertion_point(field_mutable_list:Query.file)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_file();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
Query::_internal_file() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.file_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
Query::_internal_mutable_file() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.file_;
}

// string repo = 3;
inline void Query::clear_repo() {
  _impl_.repo_.ClearToEmpty();
}
inline const std::string& Query::repo() const {
  // @@protoc_insertion_point(field_get:Query.repo)
  return _internal_repo();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Query::set_repo(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.repo_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Query.repo)
}
inline std::string* Query::mutable_repo() {
  std::string* _s = _internal_mutable_repo();
  // @@protoc_insertion_point(field_mutable:Query.repo)
  return _s;
}
inline const std::string& Query::_internal_repo() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.repo_.Get();
}
inline void Query::_internal_set_repo(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.repo_.Set(value, GetArenaForAllocation());
}
inline std::string* Query::_internal_mutable_repo() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.repo_.Mutable( GetArenaForAllocation());
}
inline std::string* Query::release_repo() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Query.repo)
  return _impl_.repo_.Release();
}
inline void Query::set_allocated_repo(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.repo_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.repo_.IsDefault()) {
          _impl_.repo_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Query.repo)
}

// string tags = 4;
inline void Query::clear_tags() {
  _impl_.tags_.ClearToEmpty();
}
inline const std::string& Query::tags() const {
  // @@protoc_insertion_point(field_get:Query.tags)
  return _internal_tags();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Query::set_tags(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.tags_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Query.tags)
}
inline std::string* Query::mutable_tags() {
  std::string* _s = _internal_mutable_tags();
  // @@protoc_insertion_point(field_mutable:Query.tags)
  return _s;
}
inline const std::string& Query::_internal_tags() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.tags_.Get();
}
inline void Query::_internal_set_tags(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.tags_.Set(value, GetArenaForAllocation());
}
inline std::string* Query::_internal_mutable_tags() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.tags_.Mutable( GetArenaForAllocation());
}
inline std::string* Query::release_tags() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Query.tags)
  return _impl_.tags_.Release();
}
inline void Query::set_allocated_tags(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.tags_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.tags_.IsDefault()) {
          _impl_.tags_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Query.tags)
}

// bool fold_case = 5;
inline void Query::clear_fold_case() {
  _impl_.fold_case_ = false;
}
inline bool Query::fold_case() const {
  // @@protoc_insertion_point(field_get:Query.fold_case)
  return _internal_fold_case();
}
inline void Query::set_fold_case(bool value) {
  _internal_set_fold_case(value);
  // @@protoc_insertion_point(field_set:Query.fold_case)
}
inline bool Query::_internal_fold_case() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.fold_case_;
}
inline void Query::_internal_set_fold_case(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.fold_case_ = value;
}

// repeated string not_file = 6;
inline int Query::_internal_not_file_size() const {
  return _internal_not_file().size();
}
inline int Query::not_file_size() const {
  return _internal_not_file_size();
}
inline void Query::clear_not_file() {
  _internal_mutable_not_file()->Clear();
}
inline std::string* Query::add_not_file() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_not_file()->Add();
  // @@protoc_insertion_point(field_add_mutable:Query.not_file)
  return _s;
}
inline const std::string& Query::not_file(int index) const {
  // @@protoc_insertion_point(field_get:Query.not_file)
  return _internal_not_file().Get(index);
}
inline std::string* Query::mutable_not_file(int index) {
  // @@protoc_insertion_point(field_mutable:Query.not_file)
  return _internal_mutable_not_file()->Mutable(index);
}
inline void Query::set_not_file(int index, const std::string& value) {
  _internal_mutable_not_file()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:Query.not_file)
}
inline void Query::set_not_file(int index, std::string&& value) {
  _internal_mutable_not_file()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:Query.not_file)
}
inline void Query::set_not_file(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_not_file()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Query.not_file)
}
inline void Query::set_not_file(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_not_file()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Query.not_file)
}
inline void Query::set_not_file(int index, absl::string_view value) {
  _internal_mutable_not_file()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:Query.not_file)
}
inline void Query::add_not_file(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_not_file()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:Query.not_file)
}
inline void Query::add_not_file(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_not_file()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:Query.not_file)
}
inline void Query::add_not_file(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_not_file()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Query.not_file)
}
inline void Query::add_not_file(const char* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_not_file()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Query.not_file)
}
inline void Query::add_not_file(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_not_file()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:Query.not_file)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
Query::not_file() const {
  // @@protoc_insertion_point(field_list:Query.not_file)
  return _internal_not_file();
}
inline ::google::protobuf::RepeatedPtrField<std::string>* Query::mutable_not_file() {
  // @@protoc_insertion_point(field_mutable_list:Query.not_file)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_not_file();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
Query::_internal_not_file() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.not_file_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
Query::_internal_mutable_not_file() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.not_file_;
}

// string not_repo = 7;
inline void Query::clear_not_repo() {
  _impl_.not_repo_.ClearToEmpty();
}
inline const std::string& Query::not_repo() const {
  // @@protoc_insertion_point(field_get:Query.not_repo)
  return _internal_not_repo();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Query::set_not_repo(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.not_repo_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Query.not_repo)
}
inline std::string* Query::mutable_not_repo() {
  std::string* _s = _internal_mutable_not_repo();
  // @@protoc_insertion_point(field_mutable:Query.not_repo)
  return _s;
}
inline const std::string& Query::_internal_not_repo() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.not_repo_.Get();
}
inline void Query::_internal_set_not_repo(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.not_repo_.Set(value, GetArenaForAllocation());
}
inline std::string* Query::_internal_mutable_not_repo() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.not_repo_.Mutable( GetArenaForAllocation());
}
inline std::string* Query::release_not_repo() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Query.not_repo)
  return _impl_.not_repo_.Release();
}
inline void Query::set_allocated_not_repo(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.not_repo_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.not_repo_.IsDefault()) {
          _impl_.not_repo_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Query.not_repo)
}

// string not_tags = 8;
inline void Query::clear_not_tags() {
  _impl_.not_tags_.ClearToEmpty();
}
inline const std::string& Query::not_tags() const {
  // @@protoc_insertion_point(field_get:Query.not_tags)
  return _internal_not_tags();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Query::set_not_tags(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.not_tags_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Query.not_tags)
}
inline std::string* Query::mutable_not_tags() {
  std::string* _s = _internal_mutable_not_tags();
  // @@protoc_insertion_point(field_mutable:Query.not_tags)
  return _s;
}
inline const std::string& Query::_internal_not_tags() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.not_tags_.Get();
}
inline void Query::_internal_set_not_tags(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.not_tags_.Set(value, GetArenaForAllocation());
}
inline std::string* Query::_internal_mutable_not_tags() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.not_tags_.Mutable( GetArenaForAllocation());
}
inline std::string* Query::release_not_tags() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Query.not_tags)
  return _impl_.not_tags_.Release();
}
inline void Query::set_allocated_not_tags(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.not_tags_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.not_tags_.IsDefault()) {
          _impl_.not_tags_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Query.not_tags)
}

// int32 max_matches = 9;
inline void Query::clear_max_matches() {
  _impl_.max_matches_ = 0;
}
inline ::int32_t Query::max_matches() const {
  // @@protoc_insertion_point(field_get:Query.max_matches)
  return _internal_max_matches();
}
inline void Query::set_max_matches(::int32_t value) {
  _internal_set_max_matches(value);
  // @@protoc_insertion_point(field_set:Query.max_matches)
}
inline ::int32_t Query::_internal_max_matches() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.max_matches_;
}
inline void Query::_internal_set_max_matches(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.max_matches_ = value;
}

// bool filename_only = 10;
inline void Query::clear_filename_only() {
  _impl_.filename_only_ = false;
}
inline bool Query::filename_only() const {
  // @@protoc_insertion_point(field_get:Query.filename_only)
  return _internal_filename_only();
}
inline void Query::set_filename_only(bool value) {
  _internal_set_filename_only(value);
  // @@protoc_insertion_point(field_set:Query.filename_only)
}
inline bool Query::_internal_filename_only() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.filename_only_;
}
inline void Query::_internal_set_filename_only(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.filename_only_ = value;
}

// int32 context_lines = 11;
inline void Query::clear_context_lines() {
  _impl_.context_lines_ = 0;
}
inline ::int32_t Query::context_lines() const {
  // @@protoc_insertion_point(field_get:Query.context_lines)
  return _internal_context_lines();
}
inline void Query::set_context_lines(::int32_t value) {
  _internal_set_context_lines(value);
  // @@protoc_insertion_point(field_set:Query.context_lines)
}
inline ::int32_t Query::_internal_context_lines() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.context_lines_;
}
inline void Query::_internal_set_context_lines(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.context_lines_ = value;
}

// -------------------------------------------------------------------

// Bounds

// int32 left = 1;
inline void Bounds::clear_left() {
  _impl_.left_ = 0;
}
inline ::int32_t Bounds::left() const {
  // @@protoc_insertion_point(field_get:Bounds.left)
  return _internal_left();
}
inline void Bounds::set_left(::int32_t value) {
  _internal_set_left(value);
  // @@protoc_insertion_point(field_set:Bounds.left)
}
inline ::int32_t Bounds::_internal_left() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.left_;
}
inline void Bounds::_internal_set_left(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.left_ = value;
}

// int32 right = 2;
inline void Bounds::clear_right() {
  _impl_.right_ = 0;
}
inline ::int32_t Bounds::right() const {
  // @@protoc_insertion_point(field_get:Bounds.right)
  return _internal_right();
}
inline void Bounds::set_right(::int32_t value) {
  _internal_set_right(value);
  // @@protoc_insertion_point(field_set:Bounds.right)
}
inline ::int32_t Bounds::_internal_right() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.right_;
}
inline void Bounds::_internal_set_right(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.right_ = value;
}

// -------------------------------------------------------------------

// SearchResult

// string tree = 1;
inline void SearchResult::clear_tree() {
  _impl_.tree_.ClearToEmpty();
}
inline const std::string& SearchResult::tree() const {
  // @@protoc_insertion_point(field_get:SearchResult.tree)
  return _internal_tree();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SearchResult::set_tree(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.tree_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SearchResult.tree)
}
inline std::string* SearchResult::mutable_tree() {
  std::string* _s = _internal_mutable_tree();
  // @@protoc_insertion_point(field_mutable:SearchResult.tree)
  return _s;
}
inline const std::string& SearchResult::_internal_tree() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.tree_.Get();
}
inline void SearchResult::_internal_set_tree(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.tree_.Set(value, GetArenaForAllocation());
}
inline std::string* SearchResult::_internal_mutable_tree() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.tree_.Mutable( GetArenaForAllocation());
}
inline std::string* SearchResult::release_tree() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:SearchResult.tree)
  return _impl_.tree_.Release();
}
inline void SearchResult::set_allocated_tree(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.tree_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.tree_.IsDefault()) {
          _impl_.tree_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SearchResult.tree)
}

// string version = 2;
inline void SearchResult::clear_version() {
  _impl_.version_.ClearToEmpty();
}
inline const std::string& SearchResult::version() const {
  // @@protoc_insertion_point(field_get:SearchResult.version)
  return _internal_version();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SearchResult::set_version(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.version_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SearchResult.version)
}
inline std::string* SearchResult::mutable_version() {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:SearchResult.version)
  return _s;
}
inline const std::string& SearchResult::_internal_version() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.version_.Get();
}
inline void SearchResult::_internal_set_version(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.version_.Set(value, GetArenaForAllocation());
}
inline std::string* SearchResult::_internal_mutable_version() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.version_.Mutable( GetArenaForAllocation());
}
inline std::string* SearchResult::release_version() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:SearchResult.version)
  return _impl_.version_.Release();
}
inline void SearchResult::set_allocated_version(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.version_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.version_.IsDefault()) {
          _impl_.version_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SearchResult.version)
}

// string path = 3;
inline void SearchResult::clear_path() {
  _impl_.path_.ClearToEmpty();
}
inline const std::string& SearchResult::path() const {
  // @@protoc_insertion_point(field_get:SearchResult.path)
  return _internal_path();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SearchResult::set_path(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.path_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SearchResult.path)
}
inline std::string* SearchResult::mutable_path() {
  std::string* _s = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:SearchResult.path)
  return _s;
}
inline const std::string& SearchResult::_internal_path() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.path_.Get();
}
inline void SearchResult::_internal_set_path(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.path_.Set(value, GetArenaForAllocation());
}
inline std::string* SearchResult::_internal_mutable_path() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.path_.Mutable( GetArenaForAllocation());
}
inline std::string* SearchResult::release_path() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:SearchResult.path)
  return _impl_.path_.Release();
}
inline void SearchResult::set_allocated_path(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.path_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.path_.IsDefault()) {
          _impl_.path_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SearchResult.path)
}

// int64 line_number = 4;
inline void SearchResult::clear_line_number() {
  _impl_.line_number_ = ::int64_t{0};
}
inline ::int64_t SearchResult::line_number() const {
  // @@protoc_insertion_point(field_get:SearchResult.line_number)
  return _internal_line_number();
}
inline void SearchResult::set_line_number(::int64_t value) {
  _internal_set_line_number(value);
  // @@protoc_insertion_point(field_set:SearchResult.line_number)
}
inline ::int64_t SearchResult::_internal_line_number() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.line_number_;
}
inline void SearchResult::_internal_set_line_number(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.line_number_ = value;
}

// repeated string context_before = 5;
inline int SearchResult::_internal_context_before_size() const {
  return _internal_context_before().size();
}
inline int SearchResult::context_before_size() const {
  return _internal_context_before_size();
}
inline void SearchResult::clear_context_before() {
  _internal_mutable_context_before()->Clear();
}
inline std::string* SearchResult::add_context_before() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_context_before()->Add();
  // @@protoc_insertion_point(field_add_mutable:SearchResult.context_before)
  return _s;
}
inline const std::string& SearchResult::context_before(int index) const {
  // @@protoc_insertion_point(field_get:SearchResult.context_before)
  return _internal_context_before().Get(index);
}
inline std::string* SearchResult::mutable_context_before(int index) {
  // @@protoc_insertion_point(field_mutable:SearchResult.context_before)
  return _internal_mutable_context_before()->Mutable(index);
}
inline void SearchResult::set_context_before(int index, const std::string& value) {
  _internal_mutable_context_before()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:SearchResult.context_before)
}
inline void SearchResult::set_context_before(int index, std::string&& value) {
  _internal_mutable_context_before()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:SearchResult.context_before)
}
inline void SearchResult::set_context_before(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_context_before()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:SearchResult.context_before)
}
inline void SearchResult::set_context_before(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_context_before()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SearchResult.context_before)
}
inline void SearchResult::set_context_before(int index, absl::string_view value) {
  _internal_mutable_context_before()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:SearchResult.context_before)
}
inline void SearchResult::add_context_before(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_context_before()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:SearchResult.context_before)
}
inline void SearchResult::add_context_before(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_context_before()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:SearchResult.context_before)
}
inline void SearchResult::add_context_before(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_context_before()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:SearchResult.context_before)
}
inline void SearchResult::add_context_before(const char* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_context_before()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:SearchResult.context_before)
}
inline void SearchResult::add_context_before(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_context_before()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:SearchResult.context_before)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
SearchResult::context_before() const {
  // @@protoc_insertion_point(field_list:SearchResult.context_before)
  return _internal_context_before();
}
inline ::google::protobuf::RepeatedPtrField<std::string>* SearchResult::mutable_context_before() {
  // @@protoc_insertion_point(field_mutable_list:SearchResult.context_before)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_context_before();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
SearchResult::_internal_context_before() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.context_before_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
SearchResult::_internal_mutable_context_before() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.context_before_;
}

// repeated string context_after = 6;
inline int SearchResult::_internal_context_after_size() const {
  return _internal_context_after().size();
}
inline int SearchResult::context_after_size() const {
  return _internal_context_after_size();
}
inline void SearchResult::clear_context_after() {
  _internal_mutable_context_after()->Clear();
}
inline std::string* SearchResult::add_context_after() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_context_after()->Add();
  // @@protoc_insertion_point(field_add_mutable:SearchResult.context_after)
  return _s;
}
inline const std::string& SearchResult::context_after(int index) const {
  // @@protoc_insertion_point(field_get:SearchResult.context_after)
  return _internal_context_after().Get(index);
}
inline std::string* SearchResult::mutable_context_after(int index) {
  // @@protoc_insertion_point(field_mutable:SearchResult.context_after)
  return _internal_mutable_context_after()->Mutable(index);
}
inline void SearchResult::set_context_after(int index, const std::string& value) {
  _internal_mutable_context_after()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:SearchResult.context_after)
}
inline void SearchResult::set_context_after(int index, std::string&& value) {
  _internal_mutable_context_after()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:SearchResult.context_after)
}
inline void SearchResult::set_context_after(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_context_after()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:SearchResult.context_after)
}
inline void SearchResult::set_context_after(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_context_after()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SearchResult.context_after)
}
inline void SearchResult::set_context_after(int index, absl::string_view value) {
  _internal_mutable_context_after()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:SearchResult.context_after)
}
inline void SearchResult::add_context_after(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_context_after()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:SearchResult.context_after)
}
inline void SearchResult::add_context_after(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_context_after()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:SearchResult.context_after)
}
inline void SearchResult::add_context_after(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_context_after()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:SearchResult.context_after)
}
inline void SearchResult::add_context_after(const char* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_context_after()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:SearchResult.context_after)
}
inline void SearchResult::add_context_after(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_context_after()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:SearchResult.context_after)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
SearchResult::context_after() const {
  // @@protoc_insertion_point(field_list:SearchResult.context_after)
  return _internal_context_after();
}
inline ::google::protobuf::RepeatedPtrField<std::string>* SearchResult::mutable_context_after() {
  // @@protoc_insertion_point(field_mutable_list:SearchResult.context_after)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_context_after();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
SearchResult::_internal_context_after() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.context_after_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
SearchResult::_internal_mutable_context_after() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.context_after_;
}

// .Bounds bounds = 7;
inline bool SearchResult::has_bounds() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.bounds_ != nullptr);
  return value;
}
inline void SearchResult::clear_bounds() {
  if (_impl_.bounds_ != nullptr) _impl_.bounds_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::Bounds& SearchResult::_internal_bounds() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::Bounds* p = _impl_.bounds_;
  return p != nullptr ? *p : reinterpret_cast<const ::Bounds&>(::_Bounds_default_instance_);
}
inline const ::Bounds& SearchResult::bounds() const {
  // @@protoc_insertion_point(field_get:SearchResult.bounds)
  return _internal_bounds();
}
inline void SearchResult::unsafe_arena_set_allocated_bounds(::Bounds* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.bounds_);
  }
  _impl_.bounds_ = reinterpret_cast<::Bounds*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SearchResult.bounds)
}
inline ::Bounds* SearchResult::release_bounds() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Bounds* released = _impl_.bounds_;
  _impl_.bounds_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::Bounds* SearchResult::unsafe_arena_release_bounds() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:SearchResult.bounds)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Bounds* temp = _impl_.bounds_;
  _impl_.bounds_ = nullptr;
  return temp;
}
inline ::Bounds* SearchResult::_internal_mutable_bounds() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.bounds_ == nullptr) {
    auto* p = CreateMaybeMessage<::Bounds>(GetArenaForAllocation());
    _impl_.bounds_ = reinterpret_cast<::Bounds*>(p);
  }
  return _impl_.bounds_;
}
inline ::Bounds* SearchResult::mutable_bounds() {
  ::Bounds* _msg = _internal_mutable_bounds();
  // @@protoc_insertion_point(field_mutable:SearchResult.bounds)
  return _msg;
}
inline void SearchResult::set_allocated_bounds(::Bounds* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::Bounds*>(_impl_.bounds_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::Bounds*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.bounds_ = reinterpret_cast<::Bounds*>(value);
  // @@protoc_insertion_point(field_set_allocated:SearchResult.bounds)
}

// string line = 8;
inline void SearchResult::clear_line() {
  _impl_.line_.ClearToEmpty();
}
inline const std::string& SearchResult::line() const {
  // @@protoc_insertion_point(field_get:SearchResult.line)
  return _internal_line();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SearchResult::set_line(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.line_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SearchResult.line)
}
inline std::string* SearchResult::mutable_line() {
  std::string* _s = _internal_mutable_line();
  // @@protoc_insertion_point(field_mutable:SearchResult.line)
  return _s;
}
inline const std::string& SearchResult::_internal_line() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.line_.Get();
}
inline void SearchResult::_internal_set_line(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.line_.Set(value, GetArenaForAllocation());
}
inline std::string* SearchResult::_internal_mutable_line() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.line_.Mutable( GetArenaForAllocation());
}
inline std::string* SearchResult::release_line() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:SearchResult.line)
  return _impl_.line_.Release();
}
inline void SearchResult::set_allocated_line(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.line_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.line_.IsDefault()) {
          _impl_.line_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SearchResult.line)
}

// -------------------------------------------------------------------

// FileResult

// string tree = 1;
inline void FileResult::clear_tree() {
  _impl_.tree_.ClearToEmpty();
}
inline const std::string& FileResult::tree() const {
  // @@protoc_insertion_point(field_get:FileResult.tree)
  return _internal_tree();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FileResult::set_tree(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.tree_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:FileResult.tree)
}
inline std::string* FileResult::mutable_tree() {
  std::string* _s = _internal_mutable_tree();
  // @@protoc_insertion_point(field_mutable:FileResult.tree)
  return _s;
}
inline const std::string& FileResult::_internal_tree() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.tree_.Get();
}
inline void FileResult::_internal_set_tree(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.tree_.Set(value, GetArenaForAllocation());
}
inline std::string* FileResult::_internal_mutable_tree() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.tree_.Mutable( GetArenaForAllocation());
}
inline std::string* FileResult::release_tree() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:FileResult.tree)
  return _impl_.tree_.Release();
}
inline void FileResult::set_allocated_tree(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.tree_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.tree_.IsDefault()) {
          _impl_.tree_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:FileResult.tree)
}

// string version = 2;
inline void FileResult::clear_version() {
  _impl_.version_.ClearToEmpty();
}
inline const std::string& FileResult::version() const {
  // @@protoc_insertion_point(field_get:FileResult.version)
  return _internal_version();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FileResult::set_version(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.version_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:FileResult.version)
}
inline std::string* FileResult::mutable_version() {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:FileResult.version)
  return _s;
}
inline const std::string& FileResult::_internal_version() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.version_.Get();
}
inline void FileResult::_internal_set_version(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.version_.Set(value, GetArenaForAllocation());
}
inline std::string* FileResult::_internal_mutable_version() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.version_.Mutable( GetArenaForAllocation());
}
inline std::string* FileResult::release_version() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:FileResult.version)
  return _impl_.version_.Release();
}
inline void FileResult::set_allocated_version(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.version_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.version_.IsDefault()) {
          _impl_.version_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:FileResult.version)
}

// string path = 3;
inline void FileResult::clear_path() {
  _impl_.path_.ClearToEmpty();
}
inline const std::string& FileResult::path() const {
  // @@protoc_insertion_point(field_get:FileResult.path)
  return _internal_path();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FileResult::set_path(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.path_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:FileResult.path)
}
inline std::string* FileResult::mutable_path() {
  std::string* _s = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:FileResult.path)
  return _s;
}
inline const std::string& FileResult::_internal_path() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.path_.Get();
}
inline void FileResult::_internal_set_path(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.path_.Set(value, GetArenaForAllocation());
}
inline std::string* FileResult::_internal_mutable_path() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.path_.Mutable( GetArenaForAllocation());
}
inline std::string* FileResult::release_path() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:FileResult.path)
  return _impl_.path_.Release();
}
inline void FileResult::set_allocated_path(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.path_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.path_.IsDefault()) {
          _impl_.path_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:FileResult.path)
}

// .Bounds bounds = 4;
inline bool FileResult::has_bounds() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.bounds_ != nullptr);
  return value;
}
inline void FileResult::clear_bounds() {
  if (_impl_.bounds_ != nullptr) _impl_.bounds_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::Bounds& FileResult::_internal_bounds() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::Bounds* p = _impl_.bounds_;
  return p != nullptr ? *p : reinterpret_cast<const ::Bounds&>(::_Bounds_default_instance_);
}
inline const ::Bounds& FileResult::bounds() const {
  // @@protoc_insertion_point(field_get:FileResult.bounds)
  return _internal_bounds();
}
inline void FileResult::unsafe_arena_set_allocated_bounds(::Bounds* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.bounds_);
  }
  _impl_.bounds_ = reinterpret_cast<::Bounds*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:FileResult.bounds)
}
inline ::Bounds* FileResult::release_bounds() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Bounds* released = _impl_.bounds_;
  _impl_.bounds_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::Bounds* FileResult::unsafe_arena_release_bounds() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:FileResult.bounds)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Bounds* temp = _impl_.bounds_;
  _impl_.bounds_ = nullptr;
  return temp;
}
inline ::Bounds* FileResult::_internal_mutable_bounds() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.bounds_ == nullptr) {
    auto* p = CreateMaybeMessage<::Bounds>(GetArenaForAllocation());
    _impl_.bounds_ = reinterpret_cast<::Bounds*>(p);
  }
  return _impl_.bounds_;
}
inline ::Bounds* FileResult::mutable_bounds() {
  ::Bounds* _msg = _internal_mutable_bounds();
  // @@protoc_insertion_point(field_mutable:FileResult.bounds)
  return _msg;
}
inline void FileResult::set_allocated_bounds(::Bounds* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::Bounds*>(_impl_.bounds_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::Bounds*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.bounds_ = reinterpret_cast<::Bounds*>(value);
  // @@protoc_insertion_point(field_set_allocated:FileResult.bounds)
}

// -------------------------------------------------------------------

// SearchStats

// int64 re2_time = 1;
inline void SearchStats::clear_re2_time() {
  _impl_.re2_time_ = ::int64_t{0};
}
inline ::int64_t SearchStats::re2_time() const {
  // @@protoc_insertion_point(field_get:SearchStats.re2_time)
  return _internal_re2_time();
}
inline void SearchStats::set_re2_time(::int64_t value) {
  _internal_set_re2_time(value);
  // @@protoc_insertion_point(field_set:SearchStats.re2_time)
}
inline ::int64_t SearchStats::_internal_re2_time() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.re2_time_;
}
inline void SearchStats::_internal_set_re2_time(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.re2_time_ = value;
}

// int64 git_time = 2;
inline void SearchStats::clear_git_time() {
  _impl_.git_time_ = ::int64_t{0};
}
inline ::int64_t SearchStats::git_time() const {
  // @@protoc_insertion_point(field_get:SearchStats.git_time)
  return _internal_git_time();
}
inline void SearchStats::set_git_time(::int64_t value) {
  _internal_set_git_time(value);
  // @@protoc_insertion_point(field_set:SearchStats.git_time)
}
inline ::int64_t SearchStats::_internal_git_time() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.git_time_;
}
inline void SearchStats::_internal_set_git_time(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.git_time_ = value;
}

// int64 sort_time = 3;
inline void SearchStats::clear_sort_time() {
  _impl_.sort_time_ = ::int64_t{0};
}
inline ::int64_t SearchStats::sort_time() const {
  // @@protoc_insertion_point(field_get:SearchStats.sort_time)
  return _internal_sort_time();
}
inline void SearchStats::set_sort_time(::int64_t value) {
  _internal_set_sort_time(value);
  // @@protoc_insertion_point(field_set:SearchStats.sort_time)
}
inline ::int64_t SearchStats::_internal_sort_time() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.sort_time_;
}
inline void SearchStats::_internal_set_sort_time(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.sort_time_ = value;
}

// int64 index_time = 4;
inline void SearchStats::clear_index_time() {
  _impl_.index_time_ = ::int64_t{0};
}
inline ::int64_t SearchStats::index_time() const {
  // @@protoc_insertion_point(field_get:SearchStats.index_time)
  return _internal_index_time();
}
inline void SearchStats::set_index_time(::int64_t value) {
  _internal_set_index_time(value);
  // @@protoc_insertion_point(field_set:SearchStats.index_time)
}
inline ::int64_t SearchStats::_internal_index_time() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.index_time_;
}
inline void SearchStats::_internal_set_index_time(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.index_time_ = value;
}

// int64 analyze_time = 5;
inline void SearchStats::clear_analyze_time() {
  _impl_.analyze_time_ = ::int64_t{0};
}
inline ::int64_t SearchStats::analyze_time() const {
  // @@protoc_insertion_point(field_get:SearchStats.analyze_time)
  return _internal_analyze_time();
}
inline void SearchStats::set_analyze_time(::int64_t value) {
  _internal_set_analyze_time(value);
  // @@protoc_insertion_point(field_set:SearchStats.analyze_time)
}
inline ::int64_t SearchStats::_internal_analyze_time() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.analyze_time_;
}
inline void SearchStats::_internal_set_analyze_time(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.analyze_time_ = value;
}

// int64 total_time = 7;
inline void SearchStats::clear_total_time() {
  _impl_.total_time_ = ::int64_t{0};
}
inline ::int64_t SearchStats::total_time() const {
  // @@protoc_insertion_point(field_get:SearchStats.total_time)
  return _internal_total_time();
}
inline void SearchStats::set_total_time(::int64_t value) {
  _internal_set_total_time(value);
  // @@protoc_insertion_point(field_set:SearchStats.total_time)
}
inline ::int64_t SearchStats::_internal_total_time() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.total_time_;
}
inline void SearchStats::_internal_set_total_time(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.total_time_ = value;
}

// .SearchStats.ExitReason exit_reason = 6;
inline void SearchStats::clear_exit_reason() {
  _impl_.exit_reason_ = 0;
}
inline ::SearchStats_ExitReason SearchStats::exit_reason() const {
  // @@protoc_insertion_point(field_get:SearchStats.exit_reason)
  return _internal_exit_reason();
}
inline void SearchStats::set_exit_reason(::SearchStats_ExitReason value) {
  _internal_set_exit_reason(value);
  // @@protoc_insertion_point(field_set:SearchStats.exit_reason)
}
inline ::SearchStats_ExitReason SearchStats::_internal_exit_reason() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::SearchStats_ExitReason>(_impl_.exit_reason_);
}
inline void SearchStats::_internal_set_exit_reason(::SearchStats_ExitReason value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.exit_reason_ = value;
}

// -------------------------------------------------------------------

// ServerInfo_Tree

// string name = 1;
inline void ServerInfo_Tree::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& ServerInfo_Tree::name() const {
  // @@protoc_insertion_point(field_get:ServerInfo.Tree.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ServerInfo_Tree::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ServerInfo.Tree.name)
}
inline std::string* ServerInfo_Tree::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:ServerInfo.Tree.name)
  return _s;
}
inline const std::string& ServerInfo_Tree::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void ServerInfo_Tree::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* ServerInfo_Tree::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* ServerInfo_Tree::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ServerInfo.Tree.name)
  return _impl_.name_.Release();
}
inline void ServerInfo_Tree::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ServerInfo.Tree.name)
}

// string version = 2;
inline void ServerInfo_Tree::clear_version() {
  _impl_.version_.ClearToEmpty();
}
inline const std::string& ServerInfo_Tree::version() const {
  // @@protoc_insertion_point(field_get:ServerInfo.Tree.version)
  return _internal_version();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ServerInfo_Tree::set_version(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.version_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ServerInfo.Tree.version)
}
inline std::string* ServerInfo_Tree::mutable_version() {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:ServerInfo.Tree.version)
  return _s;
}
inline const std::string& ServerInfo_Tree::_internal_version() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.version_.Get();
}
inline void ServerInfo_Tree::_internal_set_version(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.version_.Set(value, GetArenaForAllocation());
}
inline std::string* ServerInfo_Tree::_internal_mutable_version() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.version_.Mutable( GetArenaForAllocation());
}
inline std::string* ServerInfo_Tree::release_version() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ServerInfo.Tree.version)
  return _impl_.version_.Release();
}
inline void ServerInfo_Tree::set_allocated_version(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.version_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.version_.IsDefault()) {
          _impl_.version_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ServerInfo.Tree.version)
}

// .Metadata metadata = 3;
inline bool ServerInfo_Tree::has_metadata() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.metadata_ != nullptr);
  return value;
}
inline const ::Metadata& ServerInfo_Tree::_internal_metadata() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::Metadata* p = _impl_.metadata_;
  return p != nullptr ? *p : reinterpret_cast<const ::Metadata&>(::_Metadata_default_instance_);
}
inline const ::Metadata& ServerInfo_Tree::metadata() const {
  // @@protoc_insertion_point(field_get:ServerInfo.Tree.metadata)
  return _internal_metadata();
}
inline void ServerInfo_Tree::unsafe_arena_set_allocated_metadata(::Metadata* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.metadata_);
  }
  _impl_.metadata_ = reinterpret_cast<::Metadata*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ServerInfo.Tree.metadata)
}
inline ::Metadata* ServerInfo_Tree::release_metadata() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Metadata* released = _impl_.metadata_;
  _impl_.metadata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::Metadata* ServerInfo_Tree::unsafe_arena_release_metadata() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ServerInfo.Tree.metadata)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Metadata* temp = _impl_.metadata_;
  _impl_.metadata_ = nullptr;
  return temp;
}
inline ::Metadata* ServerInfo_Tree::_internal_mutable_metadata() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::Metadata>(GetArenaForAllocation());
    _impl_.metadata_ = reinterpret_cast<::Metadata*>(p);
  }
  return _impl_.metadata_;
}
inline ::Metadata* ServerInfo_Tree::mutable_metadata() {
  ::Metadata* _msg = _internal_mutable_metadata();
  // @@protoc_insertion_point(field_mutable:ServerInfo.Tree.metadata)
  return _msg;
}
inline void ServerInfo_Tree::set_allocated_metadata(::Metadata* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.metadata_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.metadata_ = reinterpret_cast<::Metadata*>(value);
  // @@protoc_insertion_point(field_set_allocated:ServerInfo.Tree.metadata)
}

// -------------------------------------------------------------------

// ServerInfo

// string name = 1;
inline void ServerInfo::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& ServerInfo::name() const {
  // @@protoc_insertion_point(field_get:ServerInfo.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ServerInfo::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ServerInfo.name)
}
inline std::string* ServerInfo::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:ServerInfo.name)
  return _s;
}
inline const std::string& ServerInfo::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void ServerInfo::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* ServerInfo::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* ServerInfo::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ServerInfo.name)
  return _impl_.name_.Release();
}
inline void ServerInfo::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ServerInfo.name)
}

// repeated .ServerInfo.Tree trees = 2;
inline int ServerInfo::_internal_trees_size() const {
  return _internal_trees().size();
}
inline int ServerInfo::trees_size() const {
  return _internal_trees_size();
}
inline void ServerInfo::clear_trees() {
  _internal_mutable_trees()->Clear();
}
inline ::ServerInfo_Tree* ServerInfo::mutable_trees(int index) {
  // @@protoc_insertion_point(field_mutable:ServerInfo.trees)
  return _internal_mutable_trees()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ServerInfo_Tree >*
ServerInfo::mutable_trees() {
  // @@protoc_insertion_point(field_mutable_list:ServerInfo.trees)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_trees();
}
inline const ::ServerInfo_Tree& ServerInfo::trees(int index) const {
  // @@protoc_insertion_point(field_get:ServerInfo.trees)
    return _internal_trees().Get(index);
}
inline ::ServerInfo_Tree* ServerInfo::add_trees() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::ServerInfo_Tree* _add = _internal_mutable_trees()->Add();
  // @@protoc_insertion_point(field_add:ServerInfo.trees)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::ServerInfo_Tree >&
ServerInfo::trees() const {
  // @@protoc_insertion_point(field_list:ServerInfo.trees)
  return _internal_trees();
}
inline const ::google::protobuf::RepeatedPtrField<::ServerInfo_Tree>&
ServerInfo::_internal_trees() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.trees_;
}
inline ::google::protobuf::RepeatedPtrField<::ServerInfo_Tree>*
ServerInfo::_internal_mutable_trees() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.trees_;
}

// bool has_tags = 3;
inline void ServerInfo::clear_has_tags() {
  _impl_.has_tags_ = false;
}
inline bool ServerInfo::has_tags() const {
  // @@protoc_insertion_point(field_get:ServerInfo.has_tags)
  return _internal_has_tags();
}
inline void ServerInfo::set_has_tags(bool value) {
  _internal_set_has_tags(value);
  // @@protoc_insertion_point(field_set:ServerInfo.has_tags)
}
inline bool ServerInfo::_internal_has_tags() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.has_tags_;
}
inline void ServerInfo::_internal_set_has_tags(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.has_tags_ = value;
}

// int64 index_time = 4;
inline void ServerInfo::clear_index_time() {
  _impl_.index_time_ = ::int64_t{0};
}
inline ::int64_t ServerInfo::index_time() const {
  // @@protoc_insertion_point(field_get:ServerInfo.index_time)
  return _internal_index_time();
}
inline void ServerInfo::set_index_time(::int64_t value) {
  _internal_set_index_time(value);
  // @@protoc_insertion_point(field_set:ServerInfo.index_time)
}
inline ::int64_t ServerInfo::_internal_index_time() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.index_time_;
}
inline void ServerInfo::_internal_set_index_time(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.index_time_ = value;
}

// -------------------------------------------------------------------

// CodeSearchResult

// .SearchStats stats = 1;
inline bool CodeSearchResult::has_stats() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.stats_ != nullptr);
  return value;
}
inline void CodeSearchResult::clear_stats() {
  if (_impl_.stats_ != nullptr) _impl_.stats_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::SearchStats& CodeSearchResult::_internal_stats() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::SearchStats* p = _impl_.stats_;
  return p != nullptr ? *p : reinterpret_cast<const ::SearchStats&>(::_SearchStats_default_instance_);
}
inline const ::SearchStats& CodeSearchResult::stats() const {
  // @@protoc_insertion_point(field_get:CodeSearchResult.stats)
  return _internal_stats();
}
inline void CodeSearchResult::unsafe_arena_set_allocated_stats(::SearchStats* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.stats_);
  }
  _impl_.stats_ = reinterpret_cast<::SearchStats*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CodeSearchResult.stats)
}
inline ::SearchStats* CodeSearchResult::release_stats() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::SearchStats* released = _impl_.stats_;
  _impl_.stats_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::SearchStats* CodeSearchResult::unsafe_arena_release_stats() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:CodeSearchResult.stats)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::SearchStats* temp = _impl_.stats_;
  _impl_.stats_ = nullptr;
  return temp;
}
inline ::SearchStats* CodeSearchResult::_internal_mutable_stats() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.stats_ == nullptr) {
    auto* p = CreateMaybeMessage<::SearchStats>(GetArenaForAllocation());
    _impl_.stats_ = reinterpret_cast<::SearchStats*>(p);
  }
  return _impl_.stats_;
}
inline ::SearchStats* CodeSearchResult::mutable_stats() {
  ::SearchStats* _msg = _internal_mutable_stats();
  // @@protoc_insertion_point(field_mutable:CodeSearchResult.stats)
  return _msg;
}
inline void CodeSearchResult::set_allocated_stats(::SearchStats* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::SearchStats*>(_impl_.stats_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::SearchStats*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.stats_ = reinterpret_cast<::SearchStats*>(value);
  // @@protoc_insertion_point(field_set_allocated:CodeSearchResult.stats)
}

// repeated .SearchResult results = 2;
inline int CodeSearchResult::_internal_results_size() const {
  return _internal_results().size();
}
inline int CodeSearchResult::results_size() const {
  return _internal_results_size();
}
inline void CodeSearchResult::clear_results() {
  _internal_mutable_results()->Clear();
}
inline ::SearchResult* CodeSearchResult::mutable_results(int index) {
  // @@protoc_insertion_point(field_mutable:CodeSearchResult.results)
  return _internal_mutable_results()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::SearchResult >*
CodeSearchResult::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:CodeSearchResult.results)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_results();
}
inline const ::SearchResult& CodeSearchResult::results(int index) const {
  // @@protoc_insertion_point(field_get:CodeSearchResult.results)
    return _internal_results().Get(index);
}
inline ::SearchResult* CodeSearchResult::add_results() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::SearchResult* _add = _internal_mutable_results()->Add();
  // @@protoc_insertion_point(field_add:CodeSearchResult.results)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::SearchResult >&
CodeSearchResult::results() const {
  // @@protoc_insertion_point(field_list:CodeSearchResult.results)
  return _internal_results();
}
inline const ::google::protobuf::RepeatedPtrField<::SearchResult>&
CodeSearchResult::_internal_results() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.results_;
}
inline ::google::protobuf::RepeatedPtrField<::SearchResult>*
CodeSearchResult::_internal_mutable_results() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.results_;
}

// repeated .FileResult file_results = 3;
inline int CodeSearchResult::_internal_file_results_size() const {
  return _internal_file_results().size();
}
inline int CodeSearchResult::file_results_size() const {
  return _internal_file_results_size();
}
inline void CodeSearchResult::clear_file_results() {
  _internal_mutable_file_results()->Clear();
}
inline ::FileResult* CodeSearchResult::mutable_file_results(int index) {
  // @@protoc_insertion_point(field_mutable:CodeSearchResult.file_results)
  return _internal_mutable_file_results()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::FileResult >*
CodeSearchResult::mutable_file_results() {
  // @@protoc_insertion_point(field_mutable_list:CodeSearchResult.file_results)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_file_results();
}
inline const ::FileResult& CodeSearchResult::file_results(int index) const {
  // @@protoc_insertion_point(field_get:CodeSearchResult.file_results)
    return _internal_file_results().Get(index);
}
inline ::FileResult* CodeSearchResult::add_file_results() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::FileResult* _add = _internal_mutable_file_results()->Add();
  // @@protoc_insertion_point(field_add:CodeSearchResult.file_results)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::FileResult >&
CodeSearchResult::file_results() const {
  // @@protoc_insertion_point(field_list:CodeSearchResult.file_results)
  return _internal_file_results();
}
inline const ::google::protobuf::RepeatedPtrField<::FileResult>&
CodeSearchResult::_internal_file_results() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.file_results_;
}
inline ::google::protobuf::RepeatedPtrField<::FileResult>*
CodeSearchResult::_internal_mutable_file_results() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.file_results_;
}

// string index_name = 4;
inline void CodeSearchResult::clear_index_name() {
  _impl_.index_name_.ClearToEmpty();
}
inline const std::string& CodeSearchResult::index_name() const {
  // @@protoc_insertion_point(field_get:CodeSearchResult.index_name)
  return _internal_index_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CodeSearchResult::set_index_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.index_name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CodeSearchResult.index_name)
}
inline std::string* CodeSearchResult::mutable_index_name() {
  std::string* _s = _internal_mutable_index_name();
  // @@protoc_insertion_point(field_mutable:CodeSearchResult.index_name)
  return _s;
}
inline const std::string& CodeSearchResult::_internal_index_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.index_name_.Get();
}
inline void CodeSearchResult::_internal_set_index_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.index_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CodeSearchResult::_internal_mutable_index_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.index_name_.Mutable( GetArenaForAllocation());
}
inline std::string* CodeSearchResult::release_index_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:CodeSearchResult.index_name)
  return _impl_.index_name_.Release();
}
inline void CodeSearchResult::set_allocated_index_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.index_name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.index_name_.IsDefault()) {
          _impl_.index_name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CodeSearchResult.index_name)
}

// int64 index_time = 5;
inline void CodeSearchResult::clear_index_time() {
  _impl_.index_time_ = ::int64_t{0};
}
inline ::int64_t CodeSearchResult::index_time() const {
  // @@protoc_insertion_point(field_get:CodeSearchResult.index_time)
  return _internal_index_time();
}
inline void CodeSearchResult::set_index_time(::int64_t value) {
  _internal_set_index_time(value);
  // @@protoc_insertion_point(field_set:CodeSearchResult.index_time)
}
inline ::int64_t CodeSearchResult::_internal_index_time() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.index_time_;
}
inline void CodeSearchResult::_internal_set_index_time(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.index_time_ = value;
}

// -------------------------------------------------------------------

// InfoRequest

// -------------------------------------------------------------------

// Empty

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::SearchStats_ExitReason> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::SearchStats_ExitReason>() {
  return ::SearchStats_ExitReason_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_livegrep_2eproto_2epb_2eh
